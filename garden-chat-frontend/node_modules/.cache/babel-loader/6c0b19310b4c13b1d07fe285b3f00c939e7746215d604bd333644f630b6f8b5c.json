{"ast":null,"code":"// src/components/ChatPage.js\n// Import necessary dependencies from React, router, and services\nimport React,{useState,useEffect}from'react';import{useNavigate}from'react-router-dom';import WebSocketService from'../services/WebSocketService';// Custom WebSocket service for managing connections and messaging\nimport Sidebar from'./Sidebar';// Sidebar component for displaying chat groups and online users\nimport Profile from'./Profile';// Profile component to show the user's profile info\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function ChatPage(){// State hooks for managing chat data\nconst[messages,setMessages]=useState([]);// Stores all chat messages\nconst[newMessage,setNewMessage]=useState('');// Stores the message currently being typed\nconst[selectedGroup,setSelectedGroup]=useState('general');// Stores the currently selected group\nconst[onlineUsers,setOnlineUsers]=useState([]);// Stores the list of online users\nconst[groups,setGroups]=useState(['general','gardening-tips','plant-care']);// List of chat groups\nconst[typing,setTyping]=useState(false);// Indicates whether the user is currently typing\nconst[typingMessage,setTypingMessage]=useState('');// Message to display when another user is typing\nconst[errorMessage,setErrorMessage]=useState(null);// Stores error messages (e.g., connection issues)\n// Retrieve the username from local storage\nconst username=localStorage.getItem('username');const navigate=useNavigate();// Hook to programmatically navigate between routes\n// Redirect to login if no username is found\nuseEffect(()=>{if(!username){navigate('/login');}},[username,navigate]);// Function to add a new group to the list of groups\nconst createGroup=groupName=>{if(!groups.includes(groupName)&&groupName.trim()){setGroups([...groups,groupName]);// Add the new group to the groups array\nsetSelectedGroup(groupName);// Automatically switch to the new group\n}};// Initialize messages, connect WebSocket, and handle new messages and user presence\nuseEffect(()=>{const notificationSound=new Audio('/notification.mp3');// Audio alert for new messages\nconst savedMessages=JSON.parse(localStorage.getItem('messages'))||[];// Retrieve stored messages\nsetMessages(savedMessages);// Set messages from local storage if any exist\ntry{// Connect WebSocket and set up message handler\nWebSocketService.connect(message=>{// Only add the message if it's for the selected group\nif(message.group===selectedGroup){const updatedMessages=[...messages,message];setMessages(updatedMessages);// Update messages state\nlocalStorage.setItem('messages',JSON.stringify(updatedMessages));// Persist messages\nif(message.sender!==username){notificationSound.play();// Play notification sound for messages from others\n}}},users=>setOnlineUsers(users)// Update online users list\n);WebSocketService.sendUserPresence(username);// Notify server of the user's presence\n}catch(error){console.error('WebSocket connection error:',error);// Log connection errors\nsetErrorMessage(\"Connection lost. Trying to reconnect...\");// Display error message\n}return()=>WebSocketService.disconnect();// Disconnect WebSocket on cleanup\n},[selectedGroup,username,messages]);// Handle typing status and send updates\nconst handleTyping=e=>{setNewMessage(e.target.value);// Update the message being typed\nif(!typing){setTyping(true);// Indicate that user started typing\nWebSocketService.sendTypingStatus(username,selectedGroup);// Notify others in the group\n}};// Handle typing notifications from other users\nuseEffect(()=>{WebSocketService.onTyping(user=>{setTypingMessage(`${user} is typing...`);// Display who is typing\n});const typingTimeout=setTimeout(()=>setTypingMessage(''),3000);// Clear typing message after 3 seconds\nreturn()=>clearTimeout(typingTimeout);// Clear timeout on cleanup\n},[]);// Send a new message and clear the input field\nconst sendMessage=()=>{if(newMessage.trim()){// Ensure message is not empty\nconst message={sender:username,content:newMessage,group:selectedGroup};WebSocketService.sendMessage(message);// Send message via WebSocket\nsetNewMessage('');// Clear the message input\nsetTyping(false);// Reset typing status\n}};// Render chat interface\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"chat-page\",children:[errorMessage&&/*#__PURE__*/_jsx(\"div\",{className:\"error-message\",children:errorMessage}),\" \",/*#__PURE__*/_jsx(Sidebar,{groups:groups,selectGroup:setSelectedGroup,onlineUsers:onlineUsers,createGroup:createGroup}),\" \",/*#__PURE__*/_jsxs(\"div\",{className:\"chat-section\",children:[/*#__PURE__*/_jsx(Profile,{username:username}),\" \",/*#__PURE__*/_jsxs(\"div\",{className:\"message-list\",children:[messages.map((msg,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"message\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsxs(\"strong\",{children:[msg.sender,\":\"]}),\" \",msg.content]}),\" \"]},index)),typingMessage&&/*#__PURE__*/_jsx(\"div\",{className:\"typing-indicator\",children:typingMessage}),\" \"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-bar\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Type your message...\",value:newMessage,onChange:handleTyping// Trigger typing events on change\n}),/*#__PURE__*/_jsx(\"button\",{onClick:sendMessage,children:\"Send\"}),\" \"]})]})]});}export default ChatPage;// Export component for use in other parts of the app","map":{"version":3,"names":["React","useState","useEffect","useNavigate","WebSocketService","Sidebar","Profile","jsx","_jsx","jsxs","_jsxs","ChatPage","messages","setMessages","newMessage","setNewMessage","selectedGroup","setSelectedGroup","onlineUsers","setOnlineUsers","groups","setGroups","typing","setTyping","typingMessage","setTypingMessage","errorMessage","setErrorMessage","username","localStorage","getItem","navigate","createGroup","groupName","includes","trim","notificationSound","Audio","savedMessages","JSON","parse","connect","message","group","updatedMessages","setItem","stringify","sender","play","users","sendUserPresence","error","console","disconnect","handleTyping","e","target","value","sendTypingStatus","onTyping","user","typingTimeout","setTimeout","clearTimeout","sendMessage","content","className","children","selectGroup","map","msg","index","type","placeholder","onChange","onClick"],"sources":["D:/bootcamp/SpringFrame/Project/Garden-Chat-FullStack/garden-chat-frontend/src/components/ChatPage.js"],"sourcesContent":["// src/components/ChatPage.js\r\n\r\n// Import necessary dependencies from React, router, and services\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport WebSocketService from '../services/WebSocketService'; // Custom WebSocket service for managing connections and messaging\r\nimport Sidebar from './Sidebar'; // Sidebar component for displaying chat groups and online users\r\nimport Profile from './Profile'; // Profile component to show the user's profile info\r\n\r\nfunction ChatPage() {\r\n    // State hooks for managing chat data\r\n    const [messages, setMessages] = useState([]); // Stores all chat messages\r\n    const [newMessage, setNewMessage] = useState(''); // Stores the message currently being typed\r\n    const [selectedGroup, setSelectedGroup] = useState('general'); // Stores the currently selected group\r\n    const [onlineUsers, setOnlineUsers] = useState([]); // Stores the list of online users\r\n    const [groups, setGroups] = useState(['general', 'gardening-tips', 'plant-care']); // List of chat groups\r\n    const [typing, setTyping] = useState(false); // Indicates whether the user is currently typing\r\n    const [typingMessage, setTypingMessage] = useState(''); // Message to display when another user is typing\r\n    const [errorMessage, setErrorMessage] = useState(null); // Stores error messages (e.g., connection issues)\r\n\r\n    // Retrieve the username from local storage\r\n    const username = localStorage.getItem('username');\r\n    const navigate = useNavigate(); // Hook to programmatically navigate between routes\r\n\r\n    // Redirect to login if no username is found\r\n    useEffect(() => {\r\n        if (!username) {\r\n            navigate('/login');\r\n        }\r\n    }, [username, navigate]);\r\n\r\n    // Function to add a new group to the list of groups\r\n    const createGroup = (groupName) => {\r\n        if (!groups.includes(groupName) && groupName.trim()) {\r\n            setGroups([...groups, groupName]); // Add the new group to the groups array\r\n            setSelectedGroup(groupName); // Automatically switch to the new group\r\n        }\r\n    };\r\n\r\n    // Initialize messages, connect WebSocket, and handle new messages and user presence\r\n    useEffect(() => {\r\n        const notificationSound = new Audio('/notification.mp3'); // Audio alert for new messages\r\n        const savedMessages = JSON.parse(localStorage.getItem('messages')) || []; // Retrieve stored messages\r\n        setMessages(savedMessages); // Set messages from local storage if any exist\r\n\r\n        try {\r\n            // Connect WebSocket and set up message handler\r\n            WebSocketService.connect(\r\n                (message) => {\r\n                    // Only add the message if it's for the selected group\r\n                    if (message.group === selectedGroup) {\r\n                        const updatedMessages = [...messages, message];\r\n                        setMessages(updatedMessages); // Update messages state\r\n                        localStorage.setItem('messages', JSON.stringify(updatedMessages)); // Persist messages\r\n                        if (message.sender !== username) {\r\n                            notificationSound.play(); // Play notification sound for messages from others\r\n                        }\r\n                    }\r\n                },\r\n                (users) => setOnlineUsers(users) // Update online users list\r\n            );\r\n\r\n            WebSocketService.sendUserPresence(username); // Notify server of the user's presence\r\n        } catch (error) {\r\n            console.error('WebSocket connection error:', error); // Log connection errors\r\n            setErrorMessage(\"Connection lost. Trying to reconnect...\"); // Display error message\r\n        }\r\n\r\n        return () => WebSocketService.disconnect(); // Disconnect WebSocket on cleanup\r\n    }, [selectedGroup, username, messages]);\r\n\r\n    // Handle typing status and send updates\r\n    const handleTyping = (e) => {\r\n        setNewMessage(e.target.value); // Update the message being typed\r\n        if (!typing) {\r\n            setTyping(true); // Indicate that user started typing\r\n            WebSocketService.sendTypingStatus(username, selectedGroup); // Notify others in the group\r\n        }\r\n    };\r\n\r\n    // Handle typing notifications from other users\r\n    useEffect(() => {\r\n        WebSocketService.onTyping((user) => {\r\n            setTypingMessage(`${user} is typing...`); // Display who is typing\r\n        });\r\n\r\n        const typingTimeout = setTimeout(() => setTypingMessage(''), 3000); // Clear typing message after 3 seconds\r\n        return () => clearTimeout(typingTimeout); // Clear timeout on cleanup\r\n    }, []);\r\n\r\n    // Send a new message and clear the input field\r\n    const sendMessage = () => {\r\n        if (newMessage.trim()) { // Ensure message is not empty\r\n            const message = {\r\n                sender: username,\r\n                content: newMessage,\r\n                group: selectedGroup,\r\n            };\r\n            WebSocketService.sendMessage(message); // Send message via WebSocket\r\n            setNewMessage(''); // Clear the message input\r\n            setTyping(false); // Reset typing status\r\n        }\r\n    };\r\n\r\n    // Render chat interface\r\n    return (\r\n        <div className=\"chat-page\">\r\n            {errorMessage && <div className=\"error-message\">{errorMessage}</div>} {/* Show error message if any */}\r\n            <Sidebar\r\n                groups={groups}\r\n                selectGroup={setSelectedGroup}\r\n                onlineUsers={onlineUsers}\r\n                createGroup={createGroup}\r\n            /> {/* Sidebar for group selection and user management */}\r\n            <div className=\"chat-section\">\r\n                <Profile username={username} /> {/* Displays user's profile */}\r\n                <div className=\"message-list\">\r\n                    {messages.map((msg, index) => (\r\n                        <div key={index} className=\"message\">\r\n                            <p><strong>{msg.sender}:</strong> {msg.content}</p> {/* Display each message */}\r\n                        </div>\r\n                    ))}\r\n                    {typingMessage && <div className=\"typing-indicator\">{typingMessage}</div>} {/* Display typing indicator */}\r\n                </div>\r\n                <div className=\"input-bar\">\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Type your message...\"\r\n                        value={newMessage}\r\n                        onChange={handleTyping} // Trigger typing events on change\r\n                    />\r\n                    <button onClick={sendMessage}>Send</button> {/* Button to send message */}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChatPage; // Export component for use in other parts of the app\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}