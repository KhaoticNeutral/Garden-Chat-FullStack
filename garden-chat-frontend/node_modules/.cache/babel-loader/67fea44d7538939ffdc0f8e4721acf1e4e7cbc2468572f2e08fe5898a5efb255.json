{"ast":null,"code":"// src/services/WebSocketService.js\nimport { Stomp } from '@stomp/stompjs'; // Import Stomp client library\nimport SockJS from 'sockjs-client'; // Import SockJS for WebSocket fallback support\n\n// Define the WebSocket endpoint URL (adjustable based on backend server location)\nconst URL = 'http://localhost:8088/';\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null; // Initialize the STOMP client to null\n    this.typingCallback = null; // Initialize callback for typing notifications to null\n  }\n\n  // Connect to WebSocket and set up subscription channels\n  connect(onMessageReceived, onUsersUpdated) {\n    // Create a SockJS instance using the WebSocket URL\n    const socketFactory = () => new SockJS(URL);\n\n    // Create a STOMP client using the SockJS instance for WebSocket communication\n    this.stompClient = Stomp.over(socketFactory);\n\n    // Set automatic reconnection delay to 5 seconds in case of disconnection\n    this.stompClient.reconnectDelay = 5000;\n\n    // Set up actions on successful WebSocket connection\n    this.stompClient.onConnect = () => {\n      console.log(\"WebSocket connected\");\n\n      // Subscribe to the messages topic to receive chat messages\n      this.stompClient.subscribe('/topic/messages', message => {\n        onMessageReceived(JSON.parse(message.body)); // Invoke the provided callback with the parsed message\n      });\n\n      // Subscribe to the online-users topic to get updates on online users\n      this.stompClient.subscribe('/topic/online-users', users => {\n        if (onUsersUpdated) {\n          onUsersUpdated(JSON.parse(users.body)); // Invoke the provided callback with the updated user list\n        }\n      });\n\n      // Subscribe to typing topic to receive typing notifications\n      this.stompClient.subscribe('/topic/typing', typingStatus => {\n        if (this.typingCallback) {\n          const {\n            username\n          } = JSON.parse(typingStatus.body); // Parse typing status\n          this.typingCallback(username); // Invoke typing callback with username\n        }\n      });\n    };\n\n    // Handle STOMP errors reported by the message broker\n    this.stompClient.onStompError = frame => {\n      console.error('Broker reported error: ' + frame.headers['message']); // Log broker error message\n      console.error('Additional details: ' + frame.body); // Log additional error details\n    };\n\n    // Activate the STOMP client to initiate connection\n    this.stompClient.activate();\n  }\n\n  // Set up the callback function for typing notifications\n  onTyping(callback) {\n    this.typingCallback = callback; // Assign the provided callback to typingCallback\n  }\n\n  // Send typing status to the server for a specific group\n  sendTypingStatus(username, group) {\n    if (this.stompClient && this.stompClient.connected) {\n      // Publish typing status message to the typing topic\n      this.stompClient.publish({\n        destination: '/app/typing',\n        // Destination topic for typing notifications\n        body: JSON.stringify({\n          username,\n          group\n        }) // Send the username and group as JSON\n      });\n    }\n  }\n\n  // Send a chat message to the server\n  sendMessage(message) {\n    if (this.stompClient && this.stompClient.connected) {\n      // Publish the message to the chat topic\n      this.stompClient.publish({\n        destination: '/app/chat',\n        // Destination topic for chat messages\n        body: JSON.stringify(message) // Send the message content as JSON\n      });\n    }\n  }\n\n  // Notify server of user's presence (to mark as online)\n  sendUserPresence(username) {\n    if (this.stompClient && this.stompClient.connected) {\n      // Publish user presence message to the online topic\n      this.stompClient.publish({\n        destination: '/app/online',\n        // Destination topic for online status\n        body: JSON.stringify({\n          username\n        }) // Send username as JSON\n      });\n    }\n  }\n\n  // Disconnect the WebSocket client\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.deactivate(); // Properly close the connection\n    }\n  }\n}\n\n// Export a singleton instance of WebSocketService to be used across the app\nexport default new WebSocketService();","map":{"version":3,"names":["Stomp","SockJS","URL","WebSocketService","constructor","stompClient","typingCallback","connect","onMessageReceived","onUsersUpdated","socketFactory","over","reconnectDelay","onConnect","console","log","subscribe","message","JSON","parse","body","users","typingStatus","username","onStompError","frame","error","headers","activate","onTyping","callback","sendTypingStatus","group","connected","publish","destination","stringify","sendMessage","sendUserPresence","disconnect","deactivate"],"sources":["D:/bootcamp/SpringFrame/Project/Garden-Chat-FullStack/garden-chat-frontend/src/services/WebSocketService.js"],"sourcesContent":["// src/services/WebSocketService.js\r\nimport { Stomp } from '@stomp/stompjs';    // Import Stomp client library\r\nimport SockJS from 'sockjs-client';        // Import SockJS for WebSocket fallback support\r\n\r\n// Define the WebSocket endpoint URL (adjustable based on backend server location)\r\nconst URL = 'http://localhost:8088/';\r\n\r\nclass WebSocketService {\r\n    constructor() {\r\n        this.stompClient = null;      // Initialize the STOMP client to null\r\n        this.typingCallback = null;    // Initialize callback for typing notifications to null\r\n    }\r\n\r\n    // Connect to WebSocket and set up subscription channels\r\n    connect(onMessageReceived, onUsersUpdated) {\r\n        // Create a SockJS instance using the WebSocket URL\r\n        const socketFactory = () => new SockJS(URL);\r\n\r\n        // Create a STOMP client using the SockJS instance for WebSocket communication\r\n        this.stompClient = Stomp.over(socketFactory);\r\n\r\n        // Set automatic reconnection delay to 5 seconds in case of disconnection\r\n        this.stompClient.reconnectDelay = 5000;\r\n\r\n        // Set up actions on successful WebSocket connection\r\n        this.stompClient.onConnect = () => {\r\n            console.log(\"WebSocket connected\");\r\n\r\n            // Subscribe to the messages topic to receive chat messages\r\n            this.stompClient.subscribe('/topic/messages', (message) => {\r\n                onMessageReceived(JSON.parse(message.body));  // Invoke the provided callback with the parsed message\r\n            });\r\n\r\n            // Subscribe to the online-users topic to get updates on online users\r\n            this.stompClient.subscribe('/topic/online-users', (users) => {\r\n                if (onUsersUpdated) {\r\n                    onUsersUpdated(JSON.parse(users.body));  // Invoke the provided callback with the updated user list\r\n                }\r\n            });\r\n\r\n            // Subscribe to typing topic to receive typing notifications\r\n            this.stompClient.subscribe('/topic/typing', (typingStatus) => {\r\n                if (this.typingCallback) {\r\n                    const { username } = JSON.parse(typingStatus.body); // Parse typing status\r\n                    this.typingCallback(username);  // Invoke typing callback with username\r\n                }\r\n            });\r\n        };\r\n\r\n        // Handle STOMP errors reported by the message broker\r\n        this.stompClient.onStompError = (frame) => {\r\n            console.error('Broker reported error: ' + frame.headers['message']); // Log broker error message\r\n            console.error('Additional details: ' + frame.body); // Log additional error details\r\n        };\r\n\r\n        // Activate the STOMP client to initiate connection\r\n        this.stompClient.activate();\r\n    }\r\n\r\n    // Set up the callback function for typing notifications\r\n    onTyping(callback) {\r\n        this.typingCallback = callback; // Assign the provided callback to typingCallback\r\n    }\r\n\r\n    // Send typing status to the server for a specific group\r\n    sendTypingStatus(username, group) {\r\n        if (this.stompClient && this.stompClient.connected) {\r\n            // Publish typing status message to the typing topic\r\n            this.stompClient.publish({\r\n                destination: '/app/typing',    // Destination topic for typing notifications\r\n                body: JSON.stringify({ username, group })  // Send the username and group as JSON\r\n            });\r\n        }\r\n    }\r\n\r\n    // Send a chat message to the server\r\n    sendMessage(message) {\r\n        if (this.stompClient && this.stompClient.connected) {\r\n            // Publish the message to the chat topic\r\n            this.stompClient.publish({\r\n                destination: '/app/chat',      // Destination topic for chat messages\r\n                body: JSON.stringify(message)  // Send the message content as JSON\r\n            });\r\n        }\r\n    }\r\n\r\n    // Notify server of user's presence (to mark as online)\r\n    sendUserPresence(username) {\r\n        if (this.stompClient && this.stompClient.connected) {\r\n            // Publish user presence message to the online topic\r\n            this.stompClient.publish({\r\n                destination: '/app/online',    // Destination topic for online status\r\n                body: JSON.stringify({ username })  // Send username as JSON\r\n            });\r\n        }\r\n    }\r\n\r\n    // Disconnect the WebSocket client\r\n    disconnect() {\r\n        if (this.stompClient) {\r\n            this.stompClient.deactivate(); // Properly close the connection\r\n        }\r\n    }\r\n}\r\n\r\n// Export a singleton instance of WebSocketService to be used across the app\r\nexport default new WebSocketService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}