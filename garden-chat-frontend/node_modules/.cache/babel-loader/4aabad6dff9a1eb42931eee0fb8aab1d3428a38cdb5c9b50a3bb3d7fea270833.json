{"ast":null,"code":"// src/components/LoginPage.js\n// Import necessary dependencies from React, router, and authentication context\nimport React,{useState}from'react';import{useNavigate}from'react-router-dom';import{useAuth}from'../context/AuthProvider';// Custom authentication hook for managing login state\nimport axios from'../utils/axiosConfig';// Configured Axios instance for API requests\nimport WebSocketService from'../services/WebSocketService';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function LoginPage(){// State hooks for managing login form inputs, error messages, and loading state\nconst[username,setUsername]=useState('');// Stores the entered username\nconst[password,setPassword]=useState('');// Stores the entered password\nconst[error,setError]=useState(null);// Stores error messages to display to the user\nconst[loading,setLoading]=useState(false);// Indicates if the login request is in progress\n// Get login function from authentication context and router's navigation function\nconst{login}=useAuth();// login function for setting user session\nconst navigate=useNavigate();// Router function to programmatically navigate between routes\n// Function to handle form submission and login\nconst handleLogin=async e=>{e.preventDefault();// Prevents default form submission behavior\nsetLoading(true);// Sets loading state to true while login request is in progress\nsetError(null);// Clears any previous error messages\ntry{// Sends a POST request to the login endpoint with username and password\nconst response=await axios.post('/users/login',{username,password});if(response.data.token){// If login is successful and a token is received\nlogin(username,response.data.token);// Saves the token and username in context\nWebSocketService.connect();// Connect to WebSocket after successful login\nnavigate('/chat');// Redirects to chat page upon successful login\n}else{// If the response does not contain a token, display an error message\nsetError(\"Login failed. Invalid response from server.\");}}catch(err){// If there’s an error during the request, display a generic error message\nsetError(\"Login failed. Please check your credentials.\");}finally{setLoading(false);// Resets loading state after request completes\n}};// Render login form with error messages and loading indicators\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"login-page\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Login to Garden Chat\"}),\" \",error&&/*#__PURE__*/_jsx(\"div\",{className:\"error-message\",children:error}),\" \",/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleLogin,children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:username,onChange:e=>setUsername(e.target.value)// Update username state on input change\n,placeholder:\"Username\",required:true// Makes the input field required\n}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",value:password,onChange:e=>setPassword(e.target.value)// Update password state on input change\n,placeholder:\"Password\",required:true// Makes the input field required\n}),/*#__PURE__*/_jsxs(\"button\",{type:\"submit\",disabled:loading,children:[\" \",loading?'Logging in...':'Login',\" \"]})]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Don't have an account? \",/*#__PURE__*/_jsx(\"a\",{href:\"/register\",children:\"Register here\"})]}),\" \"]});}export default LoginPage;// Export component for use in other parts of the app","map":{"version":3,"names":["React","useState","useNavigate","useAuth","axios","WebSocketService","jsx","_jsx","jsxs","_jsxs","LoginPage","username","setUsername","password","setPassword","error","setError","loading","setLoading","login","navigate","handleLogin","e","preventDefault","response","post","data","token","connect","err","className","children","onSubmit","type","value","onChange","target","placeholder","required","disabled","href"],"sources":["D:/bootcamp/SpringFrame/Project/Garden-Chat-FullStack/garden-chat-frontend/src/components/LoginPage.js"],"sourcesContent":["// src/components/LoginPage.js\r\n\r\n// Import necessary dependencies from React, router, and authentication context\r\nimport React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAuth } from '../context/AuthProvider'; // Custom authentication hook for managing login state\r\nimport axios from '../utils/axiosConfig'; // Configured Axios instance for API requests\r\nimport WebSocketService from '../services/WebSocketService';\r\n\r\nfunction LoginPage() {\r\n    // State hooks for managing login form inputs, error messages, and loading state\r\n    const [username, setUsername] = useState(''); // Stores the entered username\r\n    const [password, setPassword] = useState(''); // Stores the entered password\r\n    const [error, setError] = useState(null); // Stores error messages to display to the user\r\n    const [loading, setLoading] = useState(false); // Indicates if the login request is in progress\r\n\r\n    // Get login function from authentication context and router's navigation function\r\n    const { login } = useAuth(); // login function for setting user session\r\n    const navigate = useNavigate(); // Router function to programmatically navigate between routes\r\n\r\n    // Function to handle form submission and login\r\n    const handleLogin = async (e) => {\r\n        e.preventDefault(); // Prevents default form submission behavior\r\n        setLoading(true); // Sets loading state to true while login request is in progress\r\n        setError(null); // Clears any previous error messages\r\n\r\n        try {\r\n            // Sends a POST request to the login endpoint with username and password\r\n            const response = await axios.post('/users/login', { username, password });\r\n            if (response.data.token) {\r\n                // If login is successful and a token is received\r\n                login(username, response.data.token); // Saves the token and username in context\r\n                WebSocketService.connect(); // Connect to WebSocket after successful login\r\n                navigate('/chat'); // Redirects to chat page upon successful login\r\n            } else {\r\n                // If the response does not contain a token, display an error message\r\n                setError(\"Login failed. Invalid response from server.\");\r\n            }\r\n        } catch (err) {\r\n            // If there’s an error during the request, display a generic error message\r\n            setError(\"Login failed. Please check your credentials.\");\r\n        } finally {\r\n            setLoading(false); // Resets loading state after request completes\r\n        }\r\n    };\r\n\r\n    // Render login form with error messages and loading indicators\r\n    return (\r\n        <div className=\"login-page\">\r\n            <h2>Login to Garden Chat</h2> {/* Page title */}\r\n            {error && <div className=\"error-message\">{error}</div>} {/* Display error if any */}\r\n            <form onSubmit={handleLogin}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={username}\r\n                    onChange={(e) => setUsername(e.target.value)} // Update username state on input change\r\n                    placeholder=\"Username\"\r\n                    required // Makes the input field required\r\n                />\r\n                <input\r\n                    type=\"password\"\r\n                    value={password}\r\n                    onChange={(e) => setPassword(e.target.value)} // Update password state on input change\r\n                    placeholder=\"Password\"\r\n                    required // Makes the input field required\r\n                />\r\n                <button type=\"submit\" disabled={loading}> {/* Button is disabled while loading */}\r\n                    {loading ? 'Logging in...' : 'Login'} {/* Show \"Logging in...\" text if loading */}\r\n                </button>\r\n            </form>\r\n            <p>Don't have an account? <a href=\"/register\">Register here</a></p> {/* Link to registration page */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoginPage; // Export component for use in other parts of the app\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}