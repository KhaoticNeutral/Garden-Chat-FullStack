{"ast":null,"code":"var _jsxFileName = \"D:\\\\bootcamp\\\\SpringFrame\\\\Project\\\\Garden-Chat-FullStack\\\\garden-chat-frontend\\\\src\\\\components\\\\RegisterPage.js\",\n  _s = $RefreshSig$();\n// src/components/RegisterPage.js\n\n// Import necessary dependencies\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom'; // Hook to programmatically navigate between routes\nimport axios from '../utils/axiosConfig'; // Configured Axios instance for API requests\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RegisterPage() {\n  _s();\n  const navigate = useNavigate(); // Initialize navigation function for redirecting user\n  // State hooks for managing registration form inputs, error messages, and loading state\n  const [username, setUsername] = useState(''); // Stores the entered username\n  const [password, setPassword] = useState(''); // Stores the entered password\n  const [error, setError] = useState(null); // Stores error messages to display to the user\n  const [loading, setLoading] = useState(false); // Indicates if the registration request is in progress\n\n  // Function to handle form submission and registration\n  const handleRegister = async e => {\n    e.preventDefault(); // Prevents default form submission behavior\n    setLoading(true); // Sets loading state to true while registration request is in progress\n    setError(null); // Clears any previous error messages\n\n    try {\n      // Sends a POST request to the registration endpoint with username and password\n      const response = await axios.post('/users/register', {\n        username,\n        password\n      });\n      if (response.status === 200) {\n        // If registration is successful, alert the user and navigate to the login page\n        alert(\"Registration successful! You can now log in.\");\n        navigate('/login'); // Redirects to login page upon successful registration\n      }\n    } catch (error) {\n      var _error$response;\n      // If there’s an error during registration, display an error message\n      setError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || 'Registration failed. Please try again.');\n    } finally {\n      setLoading(false); // Resets loading state after request completes\n    }\n  };\n\n  // Render registration form with error messages and loading indicators\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"register-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Register for Garden Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleRegister,\n      children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 27\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Username\",\n        value: username,\n        onChange: e => setUsername(e.target.value) // Update username state on input change\n        ,\n        required: true // Makes the input field required\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Password\",\n        value: password,\n        onChange: e => setPassword(e.target.value) // Update password state on input change\n        ,\n        required: true // Makes the input field required\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: loading,\n        children: [\" \", loading ? 'Registering...' : 'Register', \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Already have an account? \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/login\",\n        children: \"Login here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 41\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n_s(RegisterPage, \"BeCXGZNffbxAEphLHpcuWhKEFL8=\", false, function () {\n  return [useNavigate];\n});\n_c = RegisterPage;\nexport default RegisterPage; // Export component for use in other parts of the app\nvar _c;\n$RefreshReg$(_c, \"RegisterPage\");","map":{"version":3,"names":["React","useState","useNavigate","axios","jsxDEV","_jsxDEV","RegisterPage","_s","navigate","username","setUsername","password","setPassword","error","setError","loading","setLoading","handleRegister","e","preventDefault","response","post","status","alert","_error$response","data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","required","disabled","href","_c","$RefreshReg$"],"sources":["D:/bootcamp/SpringFrame/Project/Garden-Chat-FullStack/garden-chat-frontend/src/components/RegisterPage.js"],"sourcesContent":["// src/components/RegisterPage.js\r\n\r\n// Import necessary dependencies\r\nimport React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';  // Hook to programmatically navigate between routes\r\nimport axios from '../utils/axiosConfig'; // Configured Axios instance for API requests\r\n\r\nfunction RegisterPage() {\r\n    const navigate = useNavigate();  // Initialize navigation function for redirecting user\r\n    // State hooks for managing registration form inputs, error messages, and loading state\r\n    const [username, setUsername] = useState(''); // Stores the entered username\r\n    const [password, setPassword] = useState(''); // Stores the entered password\r\n    const [error, setError] = useState(null); // Stores error messages to display to the user\r\n    const [loading, setLoading] = useState(false); // Indicates if the registration request is in progress\r\n\r\n    // Function to handle form submission and registration\r\n    const handleRegister = async (e) => {\r\n        e.preventDefault(); // Prevents default form submission behavior\r\n        setLoading(true); // Sets loading state to true while registration request is in progress\r\n        setError(null); // Clears any previous error messages\r\n\r\n        try {\r\n            // Sends a POST request to the registration endpoint with username and password\r\n            const response = await axios.post('/users/register', { username, password });\r\n            if (response.status === 200) {\r\n                // If registration is successful, alert the user and navigate to the login page\r\n                alert(\"Registration successful! You can now log in.\");\r\n                navigate('/login'); // Redirects to login page upon successful registration\r\n            }\r\n        } catch (error) {\r\n            // If there’s an error during registration, display an error message\r\n            setError(error.response?.data || 'Registration failed. Please try again.');\r\n        } finally {\r\n            setLoading(false); // Resets loading state after request completes\r\n        }\r\n    };\r\n\r\n    // Render registration form with error messages and loading indicators\r\n    return (\r\n        <div className=\"register-page\">\r\n            <h2>Register for Garden Chat</h2> {/* Page title */}\r\n            <form onSubmit={handleRegister}>\r\n                {error && <div className=\"error-message\">{error}</div>} {/* Display error if any */}\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Username\"\r\n                    value={username}\r\n                    onChange={(e) => setUsername(e.target.value)} // Update username state on input change\r\n                    required // Makes the input field required\r\n                />\r\n                <input\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    value={password}\r\n                    onChange={(e) => setPassword(e.target.value)} // Update password state on input change\r\n                    required // Makes the input field required\r\n                />\r\n                <button type=\"submit\" disabled={loading}> {/* Button is disabled while loading */}\r\n                    {loading ? 'Registering...' : 'Register'} {/* Show \"Registering...\" text if loading */}\r\n                </button>\r\n            </form>\r\n            <p>Already have an account? <a href=\"/login\">Login here</a></p> {/* Link to login page for existing users */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RegisterPage; // Export component for use in other parts of the app\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}