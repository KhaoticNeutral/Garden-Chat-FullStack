{"ast":null,"code":"// src/services/WebSocketService.js\nimport{Stomp}from'@stomp/stompjs';// Import Stomp client library\nimport SockJS from'sockjs-client';// Import SockJS for WebSocket fallback support\n// Define the WebSocket endpoint URL (adjustable based on backend server location)\n// const URL = 'http://localhost:8088/ws';\nclass WebSocketService{constructor(){this.stompClient=null;this.typingCallback=null;this.isConnected=false;this.reconnectDelay=5000;// Customizable reconnect delay\n}async connect(onMessageReceived,onUsersUpdated){if(this.isConnected){console.log(\"Already connected to WebSocket.\");return;}try{const socketFactory=()=>new SockJS('http://localhost:8088/ws');this.stompClient=Stomp.over(socketFactory);// Configure heartbeats\nthis.stompClient.heartbeatIncoming=10000;// Expect a heartbeat from the server every 10 seconds\nthis.stompClient.heartbeatOutgoing=10000;// Send a heartbeat to the server every 10 seconds\n// Add debug logging for lifecycle events\nthis.stompClient.debug=str=>console.log(`[STOMP Debug] ${str}`);// Add error handling for STOMP errors\nthis.stompClient.onStompError=frame=>{console.error('[STOMP Error] Broker reported error: '+frame.headers['message']);console.error('[STOMP Error] Additional details: '+frame.body);};await new Promise((resolve,reject)=>{this.stompClient.connect({},frame=>{console.log('[STOMP Connected] Frame received:',frame);// Mark the client as connected\nthis.isConnected=true;// Ensure subscriptions are set up after successful connection\nconsole.log('[STOMP Info] Setting up subscriptions after successful connection...');this._setupSubscriptions(onMessageReceived,onUsersUpdated);resolve(frame);},error=>{console.error('[STOMP Error] Connection error:',error);reject(error);});});// Set reconnect delay (if required for auto-reconnect)\nthis.stompClient.reconnectDelay=this.reconnectDelay||5000;}catch(error){console.error('[STOMP Error] Connection failed, retrying in '+(this.reconnectDelay||5000)+'ms.');setTimeout(()=>this.connect(onMessageReceived,onUsersUpdated),this.reconnectDelay||5000);}}// Set up actions to be taken once the connection is successful\n_setupSubscriptions(onMessageReceived,onUsersUpdated){if(this.stompClient&&this.stompClient.connected){console.log('[STOMP Info] Setting up subscriptions...');// Subscribe to the messages topic\nthis.stompClient.subscribe('/topic/messages',message=>{onMessageReceived(JSON.parse(message.body));console.log('[STOMP Debug] Message received on /topic/messages:',message);});// Subscribe to the online-users topic\nthis.stompClient.subscribe('/topic/online-users',users=>{if(onUsersUpdated){onUsersUpdated(JSON.parse(users.body));}console.log('[STOMP Debug] Online users updated:',users);});// Subscribe to typing topic\nthis.stompClient.subscribe('/topic/typing',typingStatus=>{if(this.typingCallback){const{username}=JSON.parse(typingStatus.body);this.typingCallback(username);}console.log('[STOMP Debug] Typing status received:',typingStatus);});console.log('[STOMP Info] Subscriptions successfully set up.');}else{console.error('[STOMP Warning] STOMP client is not connected. Retrying subscription setup...');setTimeout(()=>this._setupSubscriptions(onMessageReceived,onUsersUpdated),1000);}}// Set up the callback function for typing notifications\nonTyping(callback){this.typingCallback=callback;// Assign the provided callback to typingCallback\n}// Send typing status to the server for a specific group\nsendTypingStatus(username,group){if(this.stompClient&&this.stompClient.connected){this.stompClient.publish({destination:'/app/typing',body:JSON.stringify({username,group})});}}// Send a chat message to the server\nsendMessage(message){if(this.stompClient&&this.stompClient.connected){this.stompClient.publish({destination:'/app/chat',body:JSON.stringify(message)});}}// Notify server of user's presence (to mark as online)\nsendUserPresence(username){if(this.stompClient&&this.stompClient.connected){this.stompClient.publish({destination:'/app/online',body:JSON.stringify({username})});}}// Disconnect the WebSocket client\ndisconnect(){if(this.stompClient){this.stompClient.deactivate();// Properly close the connection\nthis.isConnected=false;// Reset connection state\n}}}// Export a singleton instance of WebSocketService to be used across the app\nexport default new WebSocketService();","map":{"version":3,"names":["Stomp","SockJS","WebSocketService","constructor","stompClient","typingCallback","isConnected","reconnectDelay","connect","onMessageReceived","onUsersUpdated","console","log","socketFactory","over","heartbeatIncoming","heartbeatOutgoing","debug","str","onStompError","frame","error","headers","body","Promise","resolve","reject","_setupSubscriptions","setTimeout","connected","subscribe","message","JSON","parse","users","typingStatus","username","onTyping","callback","sendTypingStatus","group","publish","destination","stringify","sendMessage","sendUserPresence","disconnect","deactivate"],"sources":["D:/bootcamp/SpringFrame/Project/Garden-Chat-FullStack/garden-chat-frontend/src/services/WebSocketService.js"],"sourcesContent":["// src/services/WebSocketService.js\r\nimport { Stomp } from '@stomp/stompjs';    // Import Stomp client library\r\nimport SockJS from 'sockjs-client';        // Import SockJS for WebSocket fallback support\r\n\r\n// Define the WebSocket endpoint URL (adjustable based on backend server location)\r\n// const URL = 'http://localhost:8088/ws';\r\n\r\nclass WebSocketService {\r\n    constructor() {\r\n        this.stompClient = null;\r\n        this.typingCallback = null;\r\n        this.isConnected = false;\r\n        this.reconnectDelay = 5000;  // Customizable reconnect delay\r\n    }\r\n\r\n    async connect(onMessageReceived, onUsersUpdated) {\r\n        if (this.isConnected) {\r\n            console.log(\"Already connected to WebSocket.\");\r\n            return;\r\n        }\r\n    \r\n        try {\r\n            const socketFactory = () => new SockJS('http://localhost:8088/ws');\r\n            this.stompClient = Stomp.over(socketFactory);\r\n    \r\n            // Configure heartbeats\r\n            this.stompClient.heartbeatIncoming = 10000; // Expect a heartbeat from the server every 10 seconds\r\n            this.stompClient.heartbeatOutgoing = 10000; // Send a heartbeat to the server every 10 seconds\r\n    \r\n            // Add debug logging for lifecycle events\r\n            this.stompClient.debug = (str) => console.log(`[STOMP Debug] ${str}`);\r\n            \r\n            // Add error handling for STOMP errors\r\n            this.stompClient.onStompError = (frame) => {\r\n                console.error('[STOMP Error] Broker reported error: ' + frame.headers['message']);\r\n                console.error('[STOMP Error] Additional details: ' + frame.body);\r\n            };\r\n    \r\n            await new Promise((resolve, reject) => {\r\n                this.stompClient.connect({}, (frame) => {\r\n                    console.log('[STOMP Connected] Frame received:', frame);\r\n    \r\n                    // Mark the client as connected\r\n                    this.isConnected = true;\r\n    \r\n                    // Ensure subscriptions are set up after successful connection\r\n                    console.log('[STOMP Info] Setting up subscriptions after successful connection...');\r\n                    this._setupSubscriptions(onMessageReceived, onUsersUpdated);\r\n    \r\n                    resolve(frame);\r\n                }, (error) => {\r\n                    console.error('[STOMP Error] Connection error:', error);\r\n                    reject(error);\r\n                });\r\n            });\r\n    \r\n            // Set reconnect delay (if required for auto-reconnect)\r\n            this.stompClient.reconnectDelay = this.reconnectDelay || 5000;\r\n    \r\n        } catch (error) {\r\n            console.error('[STOMP Error] Connection failed, retrying in ' + (this.reconnectDelay || 5000) + 'ms.');\r\n            setTimeout(() => this.connect(onMessageReceived, onUsersUpdated), this.reconnectDelay || 5000);\r\n        }\r\n    }\r\n\r\n    // Set up actions to be taken once the connection is successful\r\n    _setupSubscriptions(onMessageReceived, onUsersUpdated) {\r\n        if (this.stompClient && this.stompClient.connected) {\r\n            console.log('[STOMP Info] Setting up subscriptions...');\r\n    \r\n            // Subscribe to the messages topic\r\n            this.stompClient.subscribe('/topic/messages', (message) => {\r\n                onMessageReceived(JSON.parse(message.body));\r\n                console.log('[STOMP Debug] Message received on /topic/messages:', message);\r\n            });\r\n    \r\n            // Subscribe to the online-users topic\r\n            this.stompClient.subscribe('/topic/online-users', (users) => {\r\n                if (onUsersUpdated) {\r\n                    onUsersUpdated(JSON.parse(users.body));\r\n                }\r\n                console.log('[STOMP Debug] Online users updated:', users);\r\n            });\r\n    \r\n            // Subscribe to typing topic\r\n            this.stompClient.subscribe('/topic/typing', (typingStatus) => {\r\n                if (this.typingCallback) {\r\n                    const { username } = JSON.parse(typingStatus.body);\r\n                    this.typingCallback(username);\r\n                }\r\n                console.log('[STOMP Debug] Typing status received:', typingStatus);\r\n            });\r\n    \r\n            console.log('[STOMP Info] Subscriptions successfully set up.');\r\n        } else {\r\n            console.error('[STOMP Warning] STOMP client is not connected. Retrying subscription setup...');\r\n            setTimeout(() => this._setupSubscriptions(onMessageReceived, onUsersUpdated), 1000);\r\n        }\r\n    }\r\n\r\n    // Set up the callback function for typing notifications\r\n    onTyping(callback) {\r\n        this.typingCallback = callback; // Assign the provided callback to typingCallback\r\n    }\r\n\r\n    // Send typing status to the server for a specific group\r\n    sendTypingStatus(username, group) {\r\n        if (this.stompClient && this.stompClient.connected) {\r\n            this.stompClient.publish({\r\n                destination: '/app/typing',\r\n                body: JSON.stringify({ username, group })\r\n            });\r\n        }\r\n    }\r\n\r\n    // Send a chat message to the server\r\n    sendMessage(message) {\r\n        if (this.stompClient && this.stompClient.connected) {\r\n            this.stompClient.publish({\r\n                destination: '/app/chat',\r\n                body: JSON.stringify(message)\r\n            });\r\n        }\r\n    }\r\n\r\n    // Notify server of user's presence (to mark as online)\r\n    sendUserPresence(username) {\r\n        if (this.stompClient && this.stompClient.connected) {\r\n            this.stompClient.publish({\r\n                destination: '/app/online',\r\n                body: JSON.stringify({ username })\r\n            });\r\n        }\r\n    }\r\n\r\n    // Disconnect the WebSocket client\r\n    disconnect() {\r\n        if (this.stompClient) {\r\n            this.stompClient.deactivate(); // Properly close the connection\r\n            this.isConnected = false;  // Reset connection state\r\n        }\r\n    }\r\n}\r\n\r\n// Export a singleton instance of WebSocketService to be used across the app\r\nexport default new WebSocketService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}