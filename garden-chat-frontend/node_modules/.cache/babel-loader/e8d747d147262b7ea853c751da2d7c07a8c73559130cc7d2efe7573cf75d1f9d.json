{"ast":null,"code":"// src/services/WebSocketService.js\nimport{Stomp}from'@stomp/stompjs';// Import Stomp client library\nimport SockJS from'sockjs-client';// Import SockJS for WebSocket fallback support\n// Define the WebSocket endpoint URL (adjustable based on backend server location)\n// const URL = 'http://localhost:8088/ws';\nclass WebSocketService{constructor(){this.stompClient=null;// Initialize the STOMP client to null\nthis.typingCallback=null;// Initialize callback for typing notifications to null\nthis.isConnected=false;// Track the connection state to prevent multiple connections\n}// Connect to WebSocket and set up subscription channels\nconnect(onMessageReceived,onUsersUpdated){// If already connected, skip the connection attempt\nif(this.isConnected){console.log(\"Already connected to WebSocket.\");return;}// Create a SockJS instance using the WebSocket URL\nconst socketFactory=()=>new SockJS('http://localhost:8088/ws');// Create a STOMP client using the SockJS instance for WebSocket communication\nthis.stompClient=Stomp.over(socketFactory);// Attempt to connect to the server\nthis.stompClient.connect({},function(frame){console.log('Connected: '+frame);// Ensure subscriptions happen only after a successful connection\nthis.stompClient.subscribe('/topic/messages',function(message){onMessageReceived(JSON.parse(message.body));});this.stompClient.subscribe('/topic/online-users',function(users){if(onUsersUpdated){onUsersUpdated(JSON.parse(users.body));}});this.stompClient.subscribe('/topic/typing',function(typingStatus){if(this.typingCallback){const{username}=JSON.parse(typingStatus.body);this.typingCallback(username);}});},function(error){console.error(\"STOMP connection error: \",error);setTimeout(()=>{// Attempt to reconnect after a delay if the connection is lost\nthis.stompClient.activate();},5000);});// Set automatic reconnection delay to 5 seconds in case of disconnection\n// this.stompClient.reconnectDelay = 5000;\nthis.stompClient.debug=function(str){console.log(str);// This will log WebSocket connection events\n};// Handle STOMP errors reported by the message broker\nthis.stompClient.onStompError=frame=>{console.error('Broker reported error: '+frame.headers['message']);console.error('Additional details: '+frame.body);};}// Set up actions to be taken once the connection is successful\n_setupSubscriptions(onMessageReceived,onUsersUpdated){// Subscribe to messages topic to receive chat messages\nthis.stompClient.subscribe('/topic/messages',message=>{onMessageReceived(JSON.parse(message.body));// Invoke the provided callback with the parsed message\n});// Subscribe to the online-users topic to get updates on online users\nthis.stompClient.subscribe('/topic/online-users',users=>{if(onUsersUpdated){onUsersUpdated(JSON.parse(users.body));// Invoke the provided callback with the updated user list\n}});// Subscribe to typing topic to receive typing notifications\nthis.stompClient.subscribe('/topic/typing',typingStatus=>{if(this.typingCallback){const{username}=JSON.parse(typingStatus.body);// Parse typing status\nthis.typingCallback(username);// Invoke typing callback with username\n}});}// Set up the callback function for typing notifications\nonTyping(callback){this.typingCallback=callback;// Assign the provided callback to typingCallback\n}// Send typing status to the server for a specific group\nsendTypingStatus(username,group){if(this.stompClient&&this.stompClient.connected){this.stompClient.publish({destination:'/app/typing',body:JSON.stringify({username,group})});}}// Send a chat message to the server\nsendMessage(message){if(this.stompClient&&this.stompClient.connected){this.stompClient.publish({destination:'/app/chat',body:JSON.stringify(message)});}}// Notify server of user's presence (to mark as online)\nsendUserPresence(username){if(this.stompClient&&this.stompClient.connected){this.stompClient.publish({destination:'/app/online',body:JSON.stringify({username})});}}// Disconnect the WebSocket client\ndisconnect(){if(this.stompClient){this.stompClient.deactivate();// Properly close the connection\nthis.isConnected=false;// Reset connection state\n}}}// Export a singleton instance of WebSocketService to be used across the app\nconst webSocketService=new WebSocketService();export default webSocketService;","map":{"version":3,"names":["Stomp","SockJS","WebSocketService","constructor","stompClient","typingCallback","isConnected","connect","onMessageReceived","onUsersUpdated","console","log","socketFactory","over","frame","subscribe","message","JSON","parse","body","users","typingStatus","username","error","setTimeout","activate","debug","str","onStompError","headers","_setupSubscriptions","onTyping","callback","sendTypingStatus","group","connected","publish","destination","stringify","sendMessage","sendUserPresence","disconnect","deactivate","webSocketService"],"sources":["D:/bootcamp/SpringFrame/Project/Garden-Chat-FullStack/garden-chat-frontend/src/services/WebSocketService.js"],"sourcesContent":["// src/services/WebSocketService.js\r\nimport { Stomp } from '@stomp/stompjs';    // Import Stomp client library\r\nimport SockJS from 'sockjs-client';        // Import SockJS for WebSocket fallback support\r\n\r\n// Define the WebSocket endpoint URL (adjustable based on backend server location)\r\n// const URL = 'http://localhost:8088/ws';\r\n\r\nclass WebSocketService {\r\n    constructor() {\r\n        this.stompClient = null;      // Initialize the STOMP client to null\r\n        this.typingCallback = null;    // Initialize callback for typing notifications to null\r\n        this.isConnected = false;      // Track the connection state to prevent multiple connections\r\n    }\r\n\r\n    // Connect to WebSocket and set up subscription channels\r\n    connect(onMessageReceived, onUsersUpdated) {\r\n        // If already connected, skip the connection attempt\r\n        if (this.isConnected) {\r\n            console.log(\"Already connected to WebSocket.\");\r\n            return;\r\n        }\r\n\r\n        // Create a SockJS instance using the WebSocket URL\r\n        const socketFactory = () => new SockJS('http://localhost:8088/ws');\r\n\r\n        // Create a STOMP client using the SockJS instance for WebSocket communication\r\n        this.stompClient = Stomp.over(socketFactory);\r\n\r\n        // Attempt to connect to the server\r\n        this.stompClient.connect({}, function(frame) {\r\n            console.log('Connected: ' + frame);\r\n            \r\n            // Ensure subscriptions happen only after a successful connection\r\n            this.stompClient.subscribe('/topic/messages', function(message) {\r\n                onMessageReceived(JSON.parse(message.body));\r\n            });\r\n        \r\n            this.stompClient.subscribe('/topic/online-users', function(users) {\r\n                if (onUsersUpdated) {\r\n                    onUsersUpdated(JSON.parse(users.body));\r\n                }\r\n            });\r\n        \r\n            this.stompClient.subscribe('/topic/typing', function(typingStatus) {\r\n                if (this.typingCallback) {\r\n                    const { username } = JSON.parse(typingStatus.body);\r\n                    this.typingCallback(username);\r\n                }\r\n            });\r\n        \r\n        }, function(error) {\r\n            console.error(\"STOMP connection error: \", error);\r\n            setTimeout(() => {\r\n                // Attempt to reconnect after a delay if the connection is lost\r\n                this.stompClient.activate();\r\n            }, 5000); \r\n        });\r\n\r\n        // Set automatic reconnection delay to 5 seconds in case of disconnection\r\n        // this.stompClient.reconnectDelay = 5000;\r\n\r\n        this.stompClient.debug = function (str) {\r\n            console.log(str);  // This will log WebSocket connection events\r\n        };\r\n\r\n        // Handle STOMP errors reported by the message broker\r\n        this.stompClient.onStompError = (frame) => {\r\n            console.error('Broker reported error: ' + frame.headers['message']);\r\n            console.error('Additional details: ' + frame.body);\r\n        };\r\n    }\r\n\r\n    // Set up actions to be taken once the connection is successful\r\n    _setupSubscriptions(onMessageReceived, onUsersUpdated) {\r\n        // Subscribe to messages topic to receive chat messages\r\n        this.stompClient.subscribe('/topic/messages', (message) => {\r\n            onMessageReceived(JSON.parse(message.body));  // Invoke the provided callback with the parsed message\r\n        });\r\n\r\n        // Subscribe to the online-users topic to get updates on online users\r\n        this.stompClient.subscribe('/topic/online-users', (users) => {\r\n            if (onUsersUpdated) {\r\n                onUsersUpdated(JSON.parse(users.body));  // Invoke the provided callback with the updated user list\r\n            }\r\n        });\r\n\r\n        // Subscribe to typing topic to receive typing notifications\r\n        this.stompClient.subscribe('/topic/typing', (typingStatus) => {\r\n            if (this.typingCallback) {\r\n                const { username } = JSON.parse(typingStatus.body); // Parse typing status\r\n                this.typingCallback(username);  // Invoke typing callback with username\r\n            }\r\n        });\r\n    }\r\n\r\n    // Set up the callback function for typing notifications\r\n    onTyping(callback) {\r\n        this.typingCallback = callback; // Assign the provided callback to typingCallback\r\n    }\r\n\r\n    // Send typing status to the server for a specific group\r\n    sendTypingStatus(username, group) {\r\n        if (this.stompClient && this.stompClient.connected) {\r\n            this.stompClient.publish({\r\n                destination: '/app/typing',\r\n                body: JSON.stringify({ username, group })\r\n            });\r\n        }\r\n    }\r\n\r\n    // Send a chat message to the server\r\n    sendMessage(message) {\r\n        if (this.stompClient && this.stompClient.connected) {\r\n            this.stompClient.publish({\r\n                destination: '/app/chat',\r\n                body: JSON.stringify(message)\r\n            });\r\n        }\r\n    }\r\n\r\n    // Notify server of user's presence (to mark as online)\r\n    sendUserPresence(username) {\r\n        if (this.stompClient && this.stompClient.connected) {\r\n            this.stompClient.publish({\r\n                destination: '/app/online',\r\n                body: JSON.stringify({ username })\r\n            });\r\n        }\r\n    }\r\n\r\n    // Disconnect the WebSocket client\r\n    disconnect() {\r\n        if (this.stompClient) {\r\n            this.stompClient.deactivate(); // Properly close the connection\r\n            this.isConnected = false;  // Reset connection state\r\n        }\r\n    }\r\n}\r\n\r\n// Export a singleton instance of WebSocketService to be used across the app\r\nconst webSocketService = new WebSocketService();\r\nexport default webSocketService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}