{"ast":null,"code":"var _jsxFileName = \"D:\\\\bootcamp\\\\SpringFrame\\\\Project\\\\Garden-Chat-FullStack\\\\garden-chat-frontend\\\\src\\\\components\\\\LoginPage.js\",\n  _s = $RefreshSig$();\n// src/components/LoginPage.js\n\n// Import necessary dependencies from React, router, and authentication context\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../context/AuthProvider'; // Custom authentication hook for managing login state\nimport instance from '../utils/axiosConfig'; // Configured Axios instance for API requests\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LoginPage() {\n  _s();\n  // State hooks for managing login form inputs, error messages, and loading state\n  const [username, setUsername] = useState(''); // Stores the entered username\n  const [password, setPassword] = useState(''); // Stores the entered password\n  const [error, setError] = useState(null); // Stores error messages to display to the user\n  const [loading, setLoading] = useState(false); // Indicates if the login request is in progress\n\n  // Get login function from authentication context and router's navigation function\n  const {\n    login\n  } = useAuth(); // login function for setting user session\n  const navigate = useNavigate(); // Router function to programmatically navigate between routes\n\n  // Function to handle form submission and login\n  const handleLogin = async e => {\n    e.preventDefault(); // Prevents default form submission behavior\n    setLoading(true); // Sets loading state to true while login request is in progress\n    setError(null); // Clears any previous error messages\n\n    try {\n      // Sends a POST request to the login endpoint with username and password\n      const response = await instance.post('/users/login', {\n        username,\n        password\n      });\n      if (response.data.token) {\n        // If login is successful and a token is received\n        login(username, response.data.token); // Saves the token and username in context\n        navigate('/chat'); // Redirects to chat page upon successful login\n      } else {\n        // If the response does not contain a token, display an error message\n        setError(\"Login failed. Invalid response from server.\");\n      }\n    } catch (err) {\n      // If there’s an error during the request, display a generic error message\n      setError(\"Login failed. Please check your credentials.\");\n    } finally {\n      setLoading(false); // Resets loading state after request completes\n    }\n  };\n\n  // Render login form with error messages and loading indicators\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Login to Garden Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), \" \", error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 23\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleLogin,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: username,\n        onChange: e => setUsername(e.target.value) // Update username state on input change\n        ,\n        placeholder: \"Username\",\n        required: true // Makes the input field required\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        value: password,\n        onChange: e => setPassword(e.target.value) // Update password state on input change\n        ,\n        placeholder: \"Password\",\n        required: true // Makes the input field required\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: loading,\n        children: [\" \", loading ? 'Logging in...' : 'Login', \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Don't have an account? \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/register\",\n        children: \"Register here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 39\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n_s(LoginPage, \"ITcpD1yDRG8AcOqbNbJdmgcAivg=\", false, function () {\n  return [useAuth, useNavigate];\n});\n_c = LoginPage;\nexport default LoginPage; // Export component for use in other parts of the app\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","useNavigate","useAuth","instance","jsxDEV","_jsxDEV","LoginPage","_s","username","setUsername","password","setPassword","error","setError","loading","setLoading","login","navigate","handleLogin","e","preventDefault","response","post","data","token","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","placeholder","required","disabled","href","_c","$RefreshReg$"],"sources":["D:/bootcamp/SpringFrame/Project/Garden-Chat-FullStack/garden-chat-frontend/src/components/LoginPage.js"],"sourcesContent":["// src/components/LoginPage.js\r\n\r\n// Import necessary dependencies from React, router, and authentication context\r\nimport React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAuth } from '../context/AuthProvider'; // Custom authentication hook for managing login state\r\nimport instance from '../utils/axiosConfig'; // Configured Axios instance for API requests\r\n\r\nfunction LoginPage() {\r\n    // State hooks for managing login form inputs, error messages, and loading state\r\n    const [username, setUsername] = useState(''); // Stores the entered username\r\n    const [password, setPassword] = useState(''); // Stores the entered password\r\n    const [error, setError] = useState(null); // Stores error messages to display to the user\r\n    const [loading, setLoading] = useState(false); // Indicates if the login request is in progress\r\n\r\n    // Get login function from authentication context and router's navigation function\r\n    const { login } = useAuth(); // login function for setting user session\r\n    const navigate = useNavigate(); // Router function to programmatically navigate between routes\r\n\r\n    // Function to handle form submission and login\r\n    const handleLogin = async (e) => {\r\n        e.preventDefault(); // Prevents default form submission behavior\r\n        setLoading(true); // Sets loading state to true while login request is in progress\r\n        setError(null); // Clears any previous error messages\r\n\r\n        try {\r\n            // Sends a POST request to the login endpoint with username and password\r\n            const response = await instance.post('/users/login', { username, password });\r\n            if (response.data.token) {\r\n                // If login is successful and a token is received\r\n                login(username, response.data.token); // Saves the token and username in context\r\n                navigate('/chat'); // Redirects to chat page upon successful login\r\n            } else {\r\n                // If the response does not contain a token, display an error message\r\n                setError(\"Login failed. Invalid response from server.\");\r\n            }\r\n        } catch (err) {\r\n            // If there’s an error during the request, display a generic error message\r\n            setError(\"Login failed. Please check your credentials.\");\r\n        } finally {\r\n            setLoading(false); // Resets loading state after request completes\r\n        }\r\n    };\r\n\r\n    // Render login form with error messages and loading indicators\r\n    return (\r\n        <div className=\"login-page\">\r\n            <h2>Login to Garden Chat</h2> {/* Page title */}\r\n            {error && <div className=\"error-message\">{error}</div>} {/* Display error if any */}\r\n            <form onSubmit={handleLogin}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={username}\r\n                    onChange={(e) => setUsername(e.target.value)} // Update username state on input change\r\n                    placeholder=\"Username\"\r\n                    required // Makes the input field required\r\n                />\r\n                <input\r\n                    type=\"password\"\r\n                    value={password}\r\n                    onChange={(e) => setPassword(e.target.value)} // Update password state on input change\r\n                    placeholder=\"Password\"\r\n                    required // Makes the input field required\r\n                />\r\n                <button type=\"submit\" disabled={loading}> {/* Button is disabled while loading */}\r\n                    {loading ? 'Logging in...' : 'Login'} {/* Show \"Logging in...\" text if loading */}\r\n                </button>\r\n            </form>\r\n            <p>Don't have an account? <a href=\"/register\">Register here</a></p> {/* Link to registration page */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoginPage; // Export component for use in other parts of the app\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}