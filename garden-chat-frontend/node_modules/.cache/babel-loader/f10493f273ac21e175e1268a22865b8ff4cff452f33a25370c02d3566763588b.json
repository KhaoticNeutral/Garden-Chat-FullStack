{"ast":null,"code":"// src/services/WebSocketService.js\nimport{Stomp}from'@stomp/stompjs';// Import Stomp client library\nimport SockJS from'sockjs-client';// Import SockJS for WebSocket fallback support\n// Define the WebSocket endpoint URL (adjustable based on backend server location)\nconst URL='http://localhost:8088/ws';class WebSocketService{constructor(){this.stompClient=null;// Initialize the STOMP client to null\nthis.typingCallback=null;// Initialize callback for typing notifications to null\n}// Connect to WebSocket and set up subscription channels\nconnect(onMessageReceived,onUsersUpdated){// Create a SockJS instance using the WebSocket URL\nconst socketFactory=()=>new SockJS('http://localhost:8088/ws');// Create a STOMP client using the SockJS instance for WebSocket communication\nthis.stompClient=Stomp.over(socketFactory);// Set automatic reconnection delay to 5 seconds in case of disconnection\nthis.stompClient.reconnectDelay=5000;this.stompClient.debug(console.log('Connect'));// Set up actions on successful WebSocket connection\nthis.stompClient.onConnect=()=>{console.log(\"WebSocket connected\");// Subscribe to the messages topic to receive chat messages\nthis.stompClient.subscribe('/topic/messages',message=>{onMessageReceived(JSON.parse(message.body));// Invoke the provided callback with the parsed message\n});// Subscribe to the online-users topic to get updates on online users\nthis.stompClient.subscribe('/topic/online-users',users=>{if(onUsersUpdated){onUsersUpdated(JSON.parse(users.body));// Invoke the provided callback with the updated user list\n}});// Subscribe to typing topic to receive typing notifications\nthis.stompClient.subscribe('/topic/typing',typingStatus=>{if(this.typingCallback){const{username}=JSON.parse(typingStatus.body);// Parse typing status\nthis.typingCallback(username);// Invoke typing callback with username\n}});};// Handle STOMP errors reported by the message broker\nthis.stompClient.onStompError=frame=>{console.error('Broker reported error: '+frame.headers['message']);// Log broker error message\nconsole.error('Additional details: '+frame.body);// Log additional error details\n};// Activate the STOMP client to initiate connection\nthis.stompClient.activate();}// Set up the callback function for typing notifications\nonTyping(callback){this.typingCallback=callback;// Assign the provided callback to typingCallback\n}// Send typing status to the server for a specific group\nsendTypingStatus(username,group){if(this.stompClient&&this.stompClient.connected){// Publish typing status message to the typing topic\nthis.stompClient.publish({destination:'/app/typing',// Destination topic for typing notifications\nbody:JSON.stringify({username,group})// Send the username and group as JSON\n});}}// Send a chat message to the server\nsendMessage(message){if(this.stompClient&&this.stompClient.connected){// Publish the message to the chat topic\nthis.stompClient.publish({destination:'/app/chat',// Destination topic for chat messages\nbody:JSON.stringify(message)// Send the message content as JSON\n});}}// Notify server of user's presence (to mark as online)\nsendUserPresence(username){if(this.stompClient&&this.stompClient.connected){// Publish user presence message to the online topic\nthis.stompClient.publish({destination:'/app/online',// Destination topic for online status\nbody:JSON.stringify({username})// Send username as JSON\n});}}// Disconnect the WebSocket client\ndisconnect(){if(this.stompClient){this.stompClient.deactivate();// Properly close the connection\n}}}// Export a singleton instance of WebSocketService to be used across the app\nexport default new WebSocketService();","map":{"version":3,"names":["Stomp","SockJS","URL","WebSocketService","constructor","stompClient","typingCallback","connect","onMessageReceived","onUsersUpdated","socketFactory","over","reconnectDelay","debug","console","log","onConnect","subscribe","message","JSON","parse","body","users","typingStatus","username","onStompError","frame","error","headers","activate","onTyping","callback","sendTypingStatus","group","connected","publish","destination","stringify","sendMessage","sendUserPresence","disconnect","deactivate"],"sources":["D:/bootcamp/SpringFrame/Project/Garden-Chat-FullStack/garden-chat-frontend/src/services/WebSocketService.js"],"sourcesContent":["// src/services/WebSocketService.js\r\nimport { Stomp } from '@stomp/stompjs';    // Import Stomp client library\r\nimport SockJS from 'sockjs-client';        // Import SockJS for WebSocket fallback support\r\n\r\n// Define the WebSocket endpoint URL (adjustable based on backend server location)\r\nconst URL = 'http://localhost:8088/ws';\r\n\r\nclass WebSocketService {\r\n    constructor() {\r\n        this.stompClient = null;      // Initialize the STOMP client to null\r\n        this.typingCallback = null;    // Initialize callback for typing notifications to null\r\n    }\r\n\r\n    // Connect to WebSocket and set up subscription channels\r\n    connect(onMessageReceived, onUsersUpdated) {\r\n        // Create a SockJS instance using the WebSocket URL\r\n        const socketFactory = () => new SockJS('http://localhost:8088/ws');\r\n\r\n        // Create a STOMP client using the SockJS instance for WebSocket communication\r\n        this.stompClient = Stomp.over(socketFactory);\r\n\r\n        // Set automatic reconnection delay to 5 seconds in case of disconnection\r\n        this.stompClient.reconnectDelay = 5000;\r\n\r\n        this.stompClient.debug(console.log('Connect'))\r\n\r\n        // Set up actions on successful WebSocket connection\r\n        this.stompClient.onConnect = () => {\r\n            console.log(\"WebSocket connected\");\r\n\r\n            // Subscribe to the messages topic to receive chat messages\r\n            this.stompClient.subscribe('/topic/messages', (message) => {\r\n                onMessageReceived(JSON.parse(message.body));  // Invoke the provided callback with the parsed message\r\n            });\r\n\r\n            // Subscribe to the online-users topic to get updates on online users\r\n            this.stompClient.subscribe('/topic/online-users', (users) => {\r\n                if (onUsersUpdated) {\r\n                    onUsersUpdated(JSON.parse(users.body));  // Invoke the provided callback with the updated user list\r\n                }\r\n            });\r\n\r\n            // Subscribe to typing topic to receive typing notifications\r\n            this.stompClient.subscribe('/topic/typing', (typingStatus) => {\r\n                if (this.typingCallback) {\r\n                    const { username } = JSON.parse(typingStatus.body); // Parse typing status\r\n                    this.typingCallback(username);  // Invoke typing callback with username\r\n                }\r\n            });\r\n        };\r\n\r\n        // Handle STOMP errors reported by the message broker\r\n        this.stompClient.onStompError = (frame) => {\r\n            console.error('Broker reported error: ' + frame.headers['message']); // Log broker error message\r\n            console.error('Additional details: ' + frame.body); // Log additional error details\r\n        };\r\n\r\n        // Activate the STOMP client to initiate connection\r\n        this.stompClient.activate();\r\n    }\r\n\r\n    // Set up the callback function for typing notifications\r\n    onTyping(callback) {\r\n        this.typingCallback = callback; // Assign the provided callback to typingCallback\r\n    }\r\n\r\n    // Send typing status to the server for a specific group\r\n    sendTypingStatus(username, group) {\r\n        if (this.stompClient && this.stompClient.connected) {\r\n            // Publish typing status message to the typing topic\r\n            this.stompClient.publish({\r\n                destination: '/app/typing',    // Destination topic for typing notifications\r\n                body: JSON.stringify({ username, group })  // Send the username and group as JSON\r\n            });\r\n        }\r\n    }\r\n\r\n    // Send a chat message to the server\r\n    sendMessage(message) {\r\n        if (this.stompClient && this.stompClient.connected) {\r\n            // Publish the message to the chat topic\r\n            this.stompClient.publish({\r\n                destination: '/app/chat',      // Destination topic for chat messages\r\n                body: JSON.stringify(message)  // Send the message content as JSON\r\n            });\r\n        }\r\n    }\r\n\r\n    // Notify server of user's presence (to mark as online)\r\n    sendUserPresence(username) {\r\n        if (this.stompClient && this.stompClient.connected) {\r\n            // Publish user presence message to the online topic\r\n            this.stompClient.publish({\r\n                destination: '/app/online',    // Destination topic for online status\r\n                body: JSON.stringify({ username })  // Send username as JSON\r\n            });\r\n        }\r\n    }\r\n\r\n    // Disconnect the WebSocket client\r\n    disconnect() {\r\n        if (this.stompClient) {\r\n            this.stompClient.deactivate(); // Properly close the connection\r\n        }\r\n    }\r\n}\r\n\r\n// Export a singleton instance of WebSocketService to be used across the app\r\nexport default new WebSocketService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}