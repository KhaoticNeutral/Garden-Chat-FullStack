{"ast":null,"code":"var _jsxFileName = \"D:\\\\bootcamp\\\\SpringFrame\\\\Project\\\\Garden-Chat-FullStack\\\\garden-chat-frontend\\\\src\\\\context\\\\AuthProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/AuthProvider.js\nimport React, { createContext, useState, useContext, useEffect } from 'react';\n\n// Create the AuthContext, which will hold the authentication state and functions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// AuthProvider component to manage authentication and provide context to children components\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  // State for the current user, initialized from localStorage if available\n  const [user, setUser] = useState(() => {\n    // Check if user data is saved in localStorage to persist login sessions\n    const savedUser = localStorage.getItem('user');\n    return savedUser ? JSON.parse(savedUser) : null;\n  });\n\n  // Function to log in the user\n  const login = (username, token) => {\n    // Create user data with username and token\n    const userData = {\n      username,\n      token\n    };\n    setUser(userData); // Update state with user data\n    // Save user data to localStorage for session persistence\n    localStorage.setItem('user', JSON.stringify(userData));\n  };\n\n  // Function to log out the user\n  const logout = () => {\n    setUser(null); // Clear the user state\n    localStorage.removeItem('user'); // Remove user data from localStorage\n  };\n\n  // Check if the user is authenticated (if user data is available)\n  const isAuthenticated = () => !!user;\n\n  // useEffect to check token validity on initial render\n  useEffect(() => {\n    // If there's user data but no token, automatically log the user out\n    if (user && !user.token) {\n      logout();\n    }\n  }, [user]); // Depend on `user`, so it re-runs if user state changes\n\n  return (\n    /*#__PURE__*/\n    // Provide authentication data and functions to all child components\n    _jsxDEV(AuthContext.Provider, {\n      value: {\n        user,\n        login,\n        logout,\n        isAuthenticated\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n// Custom hook to access AuthContext easily in other components\n_s(AuthProvider, \"sKIeGxjlLL9xczAsUODRlG6Bqx8=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","savedUser","localStorage","getItem","JSON","parse","login","username","token","userData","setItem","stringify","logout","removeItem","isAuthenticated","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["D:/bootcamp/SpringFrame/Project/Garden-Chat-FullStack/garden-chat-frontend/src/context/AuthProvider.js"],"sourcesContent":["// src/context/AuthProvider.js\r\nimport React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\n// Create the AuthContext, which will hold the authentication state and functions\r\nconst AuthContext = createContext();\r\n\r\n// AuthProvider component to manage authentication and provide context to children components\r\nexport const AuthProvider = ({ children }) => {\r\n    // State for the current user, initialized from localStorage if available\r\n    const [user, setUser] = useState(() => {\r\n        // Check if user data is saved in localStorage to persist login sessions\r\n        const savedUser = localStorage.getItem('user');\r\n        return savedUser ? JSON.parse(savedUser) : null;\r\n    });\r\n\r\n    // Function to log in the user\r\n    const login = (username, token) => {\r\n        // Create user data with username and token\r\n        const userData = { username, token };\r\n        setUser(userData);  // Update state with user data\r\n        // Save user data to localStorage for session persistence\r\n        localStorage.setItem('user', JSON.stringify(userData));\r\n    };\r\n\r\n    // Function to log out the user\r\n    const logout = () => {\r\n        setUser(null);  // Clear the user state\r\n        localStorage.removeItem('user');  // Remove user data from localStorage\r\n    };\r\n\r\n    // Check if the user is authenticated (if user data is available)\r\n    const isAuthenticated = () => !!user;\r\n\r\n    // useEffect to check token validity on initial render\r\n    useEffect(() => {\r\n        // If there's user data but no token, automatically log the user out\r\n        if (user && !user.token) {\r\n            logout();\r\n        }\r\n    }, [user]);  // Depend on `user`, so it re-runs if user state changes\r\n\r\n    return (\r\n        // Provide authentication data and functions to all child components\r\n        <AuthContext.Provider value={{ user, login, logout, isAuthenticated }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\n// Custom hook to access AuthContext easily in other components\r\nexport const useAuth = () => {\r\n    return useContext(AuthContext);\r\n};\r\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;;AAE7E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1C;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,MAAM;IACnC;IACA,MAAMW,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC9C,OAAOF,SAAS,GAAGG,IAAI,CAACC,KAAK,CAACJ,SAAS,CAAC,GAAG,IAAI;EACnD,CAAC,CAAC;;EAEF;EACA,MAAMK,KAAK,GAAGA,CAACC,QAAQ,EAAEC,KAAK,KAAK;IAC/B;IACA,MAAMC,QAAQ,GAAG;MAAEF,QAAQ;MAAEC;IAAM,CAAC;IACpCR,OAAO,CAACS,QAAQ,CAAC,CAAC,CAAE;IACpB;IACAP,YAAY,CAACQ,OAAO,CAAC,MAAM,EAAEN,IAAI,CAACO,SAAS,CAACF,QAAQ,CAAC,CAAC;EAC1D,CAAC;;EAED;EACA,MAAMG,MAAM,GAAGA,CAAA,KAAM;IACjBZ,OAAO,CAAC,IAAI,CAAC,CAAC,CAAE;IAChBE,YAAY,CAACW,UAAU,CAAC,MAAM,CAAC,CAAC,CAAE;EACtC,CAAC;;EAED;EACA,MAAMC,eAAe,GAAGA,CAAA,KAAM,CAAC,CAACf,IAAI;;EAEpC;EACAP,SAAS,CAAC,MAAM;IACZ;IACA,IAAIO,IAAI,IAAI,CAACA,IAAI,CAACS,KAAK,EAAE;MACrBI,MAAM,CAAC,CAAC;IACZ;EACJ,CAAC,EAAE,CAACb,IAAI,CAAC,CAAC,CAAC,CAAE;;EAEb;IAAA;IACI;IACAL,OAAA,CAACC,WAAW,CAACoB,QAAQ;MAACC,KAAK,EAAE;QAAEjB,IAAI;QAAEO,KAAK;QAAEM,MAAM;QAAEE;MAAgB,CAAE;MAAAjB,QAAA,EACjEA;IAAQ;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACS;EAAC;AAE/B,CAAC;;AAED;AAAAtB,EAAA,CA1CaF,YAAY;AAAAyB,EAAA,GAAZzB,YAAY;AA2CzB,OAAO,MAAM0B,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACzB,OAAOhC,UAAU,CAACI,WAAW,CAAC;AAClC,CAAC;AAAC4B,GAAA,CAFWD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}