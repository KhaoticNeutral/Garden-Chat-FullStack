{"ast":null,"code":"var _jsxFileName = \"D:\\\\bootcamp\\\\SpringFrame\\\\Project\\\\Garden-Chat-FullStack\\\\garden-chat-frontend\\\\src\\\\components\\\\ChatPage.js\",\n  _s = $RefreshSig$();\n// src/components/ChatPage.js\n\n// Import necessary dependencies from React, router, and services\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport WebSocketService from '../services/WebSocketService'; // WebSocket service for connections and messaging\nimport Sidebar from './Sidebar'; // Sidebar for chat groups and online users\nimport Profile from './Profile'; // Profile component for user info\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatPage() {\n  _s();\n  // State hooks for managing chat data\n  const [messages, setMessages] = useState([]); // Stores all chat messages\n  const [newMessage, setNewMessage] = useState(''); // Message being typed\n  const [selectedGroup, setSelectedGroup] = useState('general'); // Current chat group\n  const [onlineUsers, setOnlineUsers] = useState([]); // List of online users\n  const [groups, setGroups] = useState(['general', 'gardening-tips', 'plant-care']); // Chat groups\n  const [typingMessage, setTypingMessage] = useState(''); // Displayed typing indicator\n  const [errorMessage, setErrorMessage] = useState(null); // Connection error message\n\n  // Retrieve the username from localStorage\n  const username = localStorage.getItem('username');\n  const navigate = useNavigate(); // Hook to programmatically navigate between routes\n\n  // Redirect to login if no username is found\n  useEffect(() => {\n    if (!username) {\n      console.error(\"[ChatPage Error] Username not found. Redirecting to login...\");\n      navigate('/login');\n    }\n  }, [username, navigate]);\n\n  // Connect WebSocket and handle subscriptions\n  useEffect(() => {\n    if (!username) return; // Prevent WebSocket connection without a valid username\n\n    const notificationSound = new Audio('/notification.mp3'); // Sound for new messages\n    const savedMessages = JSON.parse(localStorage.getItem('messages')) || []; // Retrieve stored messages\n    setMessages(savedMessages); // Initialize state with stored messages\n\n    const handleNewMessage = message => {\n      if (message.group === selectedGroup) {\n        const updatedMessages = [...messages, message];\n        setMessages(updatedMessages); // Update messages state\n        localStorage.setItem('messages', JSON.stringify(updatedMessages)); // Persist messages\n        if (message.sender !== username) {\n          notificationSound.play(); // Play sound for new messages\n        }\n      }\n    };\n    const handleUserUpdates = users => {\n      setOnlineUsers(users); // Update online users\n    };\n    try {\n      WebSocketService.connect(handleNewMessage, handleUserUpdates); // Connect WebSocket\n      WebSocketService.sendUserPresence(username); // Notify server of the user's presence\n    } catch (error) {\n      console.error(\"[ChatPage Error] WebSocket connection failed:\", error);\n      setErrorMessage(\"Connection lost. Trying to reconnect...\");\n    }\n\n    // Cleanup on unmount\n    return () => {\n      WebSocketService.disconnect();\n    };\n  }, [selectedGroup, username]);\n\n  // Handle typing status and notifications\n  useEffect(() => {\n    WebSocketService.onTyping(user => {\n      if (user !== username) {\n        setTypingMessage(`${user} is typing...`);\n      }\n    });\n    const typingTimeout = setTimeout(() => setTypingMessage(''), 3000); // Clear typing indicator after 3 seconds\n    return () => clearTimeout(typingTimeout);\n  }, [username]);\n\n  // Send typing status when the user types\n  const handleTyping = e => {\n    setNewMessage(e.target.value); // Update the input field\n    if (e.target.value.trim()) {\n      WebSocketService.sendTypingStatus(username, selectedGroup); // Notify others\n    }\n  };\n\n  // Send a new message\n  const sendMessage = () => {\n    if (newMessage.trim()) {\n      const message = {\n        sender: username,\n        content: newMessage,\n        group: selectedGroup\n      };\n      WebSocketService.sendMessage(message); // Send message to server\n      setNewMessage(''); // Clear input\n    }\n  };\n\n  // Add a new group\n  const createGroup = groupName => {\n    if (!groups.includes(groupName) && groupName.trim()) {\n      setGroups([...groups, groupName]); // Add group\n      setSelectedGroup(groupName); // Switch to new group\n    }\n  };\n\n  // Render the chat interface\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-page\",\n    children: [errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 30\n    }, this), \" \", /*#__PURE__*/_jsxDEV(Sidebar, {\n      groups: groups,\n      selectGroup: setSelectedGroup,\n      onlineUsers: onlineUsers,\n      createGroup: createGroup\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-section\",\n      children: [/*#__PURE__*/_jsxDEV(Profile, {\n        username: username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-list\",\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [msg.sender, \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 32\n            }, this), \" \", msg.content]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 29\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 25\n        }, this)), typingMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"typing-indicator\",\n          children: typingMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 39\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-bar\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type your message...\",\n          value: newMessage,\n          onChange: handleTyping\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 9\n  }, this);\n}\n_s(ChatPage, \"BQDHLTAQRR9ZvrVj+ihiuxySezo=\", false, function () {\n  return [useNavigate];\n});\n_c = ChatPage;\nexport default ChatPage; // Export component for use in other parts of the app\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","WebSocketService","Sidebar","Profile","jsxDEV","_jsxDEV","ChatPage","_s","messages","setMessages","newMessage","setNewMessage","selectedGroup","setSelectedGroup","onlineUsers","setOnlineUsers","groups","setGroups","typingMessage","setTypingMessage","errorMessage","setErrorMessage","username","localStorage","getItem","navigate","console","error","notificationSound","Audio","savedMessages","JSON","parse","handleNewMessage","message","group","updatedMessages","setItem","stringify","sender","play","handleUserUpdates","users","connect","sendUserPresence","disconnect","onTyping","user","typingTimeout","setTimeout","clearTimeout","handleTyping","e","target","value","trim","sendTypingStatus","sendMessage","content","createGroup","groupName","includes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","selectGroup","map","msg","index","type","placeholder","onChange","onClick","_c","$RefreshReg$"],"sources":["D:/bootcamp/SpringFrame/Project/Garden-Chat-FullStack/garden-chat-frontend/src/components/ChatPage.js"],"sourcesContent":["// src/components/ChatPage.js\r\n\r\n// Import necessary dependencies from React, router, and services\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport WebSocketService from '../services/WebSocketService'; // WebSocket service for connections and messaging\r\nimport Sidebar from './Sidebar'; // Sidebar for chat groups and online users\r\nimport Profile from './Profile'; // Profile component for user info\r\n\r\nfunction ChatPage() {\r\n    // State hooks for managing chat data\r\n    const [messages, setMessages] = useState([]); // Stores all chat messages\r\n    const [newMessage, setNewMessage] = useState(''); // Message being typed\r\n    const [selectedGroup, setSelectedGroup] = useState('general'); // Current chat group\r\n    const [onlineUsers, setOnlineUsers] = useState([]); // List of online users\r\n    const [groups, setGroups] = useState(['general', 'gardening-tips', 'plant-care']); // Chat groups\r\n    const [typingMessage, setTypingMessage] = useState(''); // Displayed typing indicator\r\n    const [errorMessage, setErrorMessage] = useState(null); // Connection error message\r\n\r\n    // Retrieve the username from localStorage\r\n    const username = localStorage.getItem('username');\r\n    const navigate = useNavigate(); // Hook to programmatically navigate between routes\r\n\r\n    // Redirect to login if no username is found\r\n    useEffect(() => {\r\n        if (!username) {\r\n            console.error(\"[ChatPage Error] Username not found. Redirecting to login...\");\r\n            navigate('/login');\r\n        }\r\n    }, [username, navigate]);\r\n\r\n    // Connect WebSocket and handle subscriptions\r\n    useEffect(() => {\r\n        if (!username) return; // Prevent WebSocket connection without a valid username\r\n\r\n        const notificationSound = new Audio('/notification.mp3'); // Sound for new messages\r\n        const savedMessages = JSON.parse(localStorage.getItem('messages')) || []; // Retrieve stored messages\r\n        setMessages(savedMessages); // Initialize state with stored messages\r\n\r\n        const handleNewMessage = (message) => {\r\n            if (message.group === selectedGroup) {\r\n                const updatedMessages = [...messages, message];\r\n                setMessages(updatedMessages); // Update messages state\r\n                localStorage.setItem('messages', JSON.stringify(updatedMessages)); // Persist messages\r\n                if (message.sender !== username) {\r\n                    notificationSound.play(); // Play sound for new messages\r\n                }\r\n            }\r\n        };\r\n\r\n        const handleUserUpdates = (users) => {\r\n            setOnlineUsers(users); // Update online users\r\n        };\r\n\r\n        try {\r\n            WebSocketService.connect(handleNewMessage, handleUserUpdates); // Connect WebSocket\r\n            WebSocketService.sendUserPresence(username); // Notify server of the user's presence\r\n        } catch (error) {\r\n            console.error(\"[ChatPage Error] WebSocket connection failed:\", error);\r\n            setErrorMessage(\"Connection lost. Trying to reconnect...\");\r\n        }\r\n\r\n        // Cleanup on unmount\r\n        return () => {\r\n            WebSocketService.disconnect();\r\n        };\r\n    }, [selectedGroup, username]);\r\n\r\n    // Handle typing status and notifications\r\n    useEffect(() => {\r\n        WebSocketService.onTyping((user) => {\r\n            if (user !== username) {\r\n                setTypingMessage(`${user} is typing...`);\r\n            }\r\n        });\r\n\r\n        const typingTimeout = setTimeout(() => setTypingMessage(''), 3000); // Clear typing indicator after 3 seconds\r\n        return () => clearTimeout(typingTimeout);\r\n    }, [username]);\r\n\r\n    // Send typing status when the user types\r\n    const handleTyping = (e) => {\r\n        setNewMessage(e.target.value); // Update the input field\r\n        if (e.target.value.trim()) {\r\n            WebSocketService.sendTypingStatus(username, selectedGroup); // Notify others\r\n        }\r\n    };\r\n\r\n    // Send a new message\r\n    const sendMessage = () => {\r\n        if (newMessage.trim()) {\r\n            const message = {\r\n                sender: username,\r\n                content: newMessage,\r\n                group: selectedGroup,\r\n            };\r\n            WebSocketService.sendMessage(message); // Send message to server\r\n            setNewMessage(''); // Clear input\r\n        }\r\n    };\r\n\r\n    // Add a new group\r\n    const createGroup = (groupName) => {\r\n        if (!groups.includes(groupName) && groupName.trim()) {\r\n            setGroups([...groups, groupName]); // Add group\r\n            setSelectedGroup(groupName); // Switch to new group\r\n        }\r\n    };\r\n\r\n    // Render the chat interface\r\n    return (\r\n        <div className=\"chat-page\">\r\n            {errorMessage && <div className=\"error-message\">{errorMessage}</div>} {/* Display errors */}\r\n            <Sidebar\r\n                groups={groups}\r\n                selectGroup={setSelectedGroup}\r\n                onlineUsers={onlineUsers}\r\n                createGroup={createGroup}\r\n            />\r\n            <div className=\"chat-section\">\r\n                <Profile username={username} />\r\n                <div className=\"message-list\">\r\n                    {messages.map((msg, index) => (\r\n                        <div key={index} className=\"message\">\r\n                            <p><strong>{msg.sender}:</strong> {msg.content}</p>\r\n                        </div>\r\n                    ))}\r\n                    {typingMessage && <div className=\"typing-indicator\">{typingMessage}</div>}\r\n                </div>\r\n                <div className=\"input-bar\">\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Type your message...\"\r\n                        value={newMessage}\r\n                        onChange={handleTyping}\r\n                    />\r\n                    <button onClick={sendMessage}>Send</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChatPage; // Export component for use in other parts of the app\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}