{"ast":null,"code":"// src/utils/axiosConfig.js\nimport axios from'axios';// Import the Axios library for making HTTP requests\n// Create an Axios instance with default configuration\nconst instance=axios.create({// Base URL for the backend API; all requests will be prefixed with this URL\nbaseURL:'http://localhost:8088/api',withCredentials:true// Allow cookies if needed\n// Default headers for all requests sent by this Axios instance\n});// Axios request interceptor to attach the authentication token to headers\ninstance.interceptors.request.use(config=>{// Retrieve the token from localStorage (if present)\nconst token=localStorage.getItem('token');// If a token is found, add it to the Authorization header of the request\nif(token){config.headers.Authorization=`Bearer ${token}`;}// Only set JSON content type for API requests\nif(!config.url.endsWith('.css')&&!config.url.endsWith('.js')){config.headers['Content-Type']='application/json';}// Return the modified config to proceed with the request\nreturn config;});// Export the configured Axios instance for use in API calls across the app\nexport default instance;","map":{"version":3,"names":["axios","instance","create","baseURL","withCredentials","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","url","endsWith"],"sources":["D:/bootcamp/SpringFrame/Project/Garden-Chat-FullStack/garden-chat-frontend/src/utils/axiosConfig.js"],"sourcesContent":["// src/utils/axiosConfig.js\r\nimport axios from 'axios'; // Import the Axios library for making HTTP requests\r\n\r\n// Create an Axios instance with default configuration\r\nconst instance = axios.create({\r\n    // Base URL for the backend API; all requests will be prefixed with this URL\r\n    baseURL: 'http://localhost:8088/api',\r\n    withCredentials: true, // Allow cookies if needed\r\n    // Default headers for all requests sent by this Axios instance\r\n});\r\n\r\n// Axios request interceptor to attach the authentication token to headers\r\ninstance.interceptors.request.use((config) => {\r\n    // Retrieve the token from localStorage (if present)\r\n    const token = localStorage.getItem('token');\r\n\r\n    // If a token is found, add it to the Authorization header of the request\r\n    if (token) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    // Only set JSON content type for API requests\r\n    if (!config.url.endsWith('.css') && !config.url.endsWith('.js')) {\r\n        config.headers['Content-Type'] = 'application/json';\r\n    }\r\n    // Return the modified config to proceed with the request\r\n    return config;\r\n});\r\n\r\n// Export the configured Axios instance for use in API calls across the app\r\nexport default instance;\r\n"],"mappings":"AAAA;AACA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAAE;AAE3B;AACA,KAAM,CAAAC,QAAQ,CAAGD,KAAK,CAACE,MAAM,CAAC,CAC1B;AACAC,OAAO,CAAE,2BAA2B,CACpCC,eAAe,CAAE,IAAM;AACvB;AACJ,CAAC,CAAC,CAEF;AACAH,QAAQ,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,EAAK,CAC1C;AACA,KAAM,CAAAC,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAE3C;AACA,GAAIF,KAAK,CAAE,CACPD,MAAM,CAACI,OAAO,CAACC,aAAa,CAAG,UAAUJ,KAAK,EAAE,CACpD,CACA;AACA,GAAI,CAACD,MAAM,CAACM,GAAG,CAACC,QAAQ,CAAC,MAAM,CAAC,EAAI,CAACP,MAAM,CAACM,GAAG,CAACC,QAAQ,CAAC,KAAK,CAAC,CAAE,CAC7DP,MAAM,CAACI,OAAO,CAAC,cAAc,CAAC,CAAG,kBAAkB,CACvD,CACA;AACA,MAAO,CAAAJ,MAAM,CACjB,CAAC,CAAC,CAEF;AACA,cAAe,CAAAP,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}