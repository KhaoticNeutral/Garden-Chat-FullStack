{"ast":null,"code":"// src/utils/axiosConfig.js\nimport axios from 'axios'; // Import the Axios library for making HTTP requests\n\n// Create an Axios instance with default configuration\nconst instance = axios.create({\n  // Base URL for the backend API; all requests will be prefixed with this URL\n  baseURL: 'http://localhost:8088/api',\n  withCredentials: true,\n  // Allow cookies if needed\n  // Default headers for all requests sent by this Axios instance\n  headers: {\n    'Content-Type': 'application/json' // Set the content type to JSON\n  }\n});\n\n// Axios request interceptor to attach the authentication token to headers\ninstance.interceptors.request.use(config => {\n  // Retrieve the token from localStorage (if present)\n  const token = localStorage.getItem('token');\n\n  // If a token is found, add it to the Authorization header of the request\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n\n  // Return the modified config to proceed with the request\n  return config;\n});\n\n// Export the configured Axios instance for use in API calls across the app\nexport default instance;","map":{"version":3,"names":["axios","instance","create","baseURL","withCredentials","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization"],"sources":["D:/bootcamp/SpringFrame/Project/Garden-Chat-FullStack/garden-chat-frontend/src/utils/axiosConfig.js"],"sourcesContent":["// src/utils/axiosConfig.js\r\nimport axios from 'axios'; // Import the Axios library for making HTTP requests\r\n\r\n// Create an Axios instance with default configuration\r\nconst instance = axios.create({\r\n    // Base URL for the backend API; all requests will be prefixed with this URL\r\n    baseURL: 'http://localhost:8088/api',\r\n    withCredentials: true, // Allow cookies if needed\r\n    // Default headers for all requests sent by this Axios instance\r\n    headers: {\r\n        'Content-Type': 'application/json',  // Set the content type to JSON\r\n    },\r\n});\r\n\r\n// Axios request interceptor to attach the authentication token to headers\r\ninstance.interceptors.request.use((config) => {\r\n    // Retrieve the token from localStorage (if present)\r\n    const token = localStorage.getItem('token');\r\n\r\n    // If a token is found, add it to the Authorization header of the request\r\n    if (token) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n\r\n    // Return the modified config to proceed with the request\r\n    return config;\r\n});\r\n\r\n// Export the configured Axios instance for use in API calls across the app\r\nexport default instance;\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO,CAAC,CAAC;;AAE3B;AACA,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC1B;EACAC,OAAO,EAAE,2BAA2B;EACpCC,eAAe,EAAE,IAAI;EAAE;EACvB;EACAC,OAAO,EAAE;IACL,cAAc,EAAE,kBAAkB,CAAG;EACzC;AACJ,CAAC,CAAC;;AAEF;AACAJ,QAAQ,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EAC1C;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;;EAE3C;EACA,IAAIF,KAAK,EAAE;IACPD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EACpD;;EAEA;EACA,OAAOD,MAAM;AACjB,CAAC,CAAC;;AAEF;AACA,eAAeR,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}