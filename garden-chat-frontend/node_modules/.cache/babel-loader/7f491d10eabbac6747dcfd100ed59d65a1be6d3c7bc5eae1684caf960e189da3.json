{"ast":null,"code":"// src/context/AuthProvider.js\nimport React,{createContext,useState,useContext,useEffect}from'react';// Create the AuthContext, which will hold the authentication state and functions\nimport{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();// AuthProvider component to manage authentication and provide context to children components\nexport const AuthProvider=_ref=>{let{children}=_ref;// State for the current user, initialized from localStorage if available\nconst[user,setUser]=useState(()=>{// Check if user data is saved in localStorage to persist login sessions\nconst savedUser=localStorage.getItem('user');return savedUser?JSON.parse(savedUser):null;});// Function to log in the user\nconst login=(username,token)=>{// Create user data with username and token\nconst userData={username,token};setUser(userData);// Update state with user data\n// Save user data to localStorage for session persistence\nlocalStorage.setItem('user',JSON.stringify(userData));};// Function to log out the user\nconst logout=()=>{setUser(null);// Clear the user state\nlocalStorage.removeItem('user');// Remove user data from localStorage\n};// Check if the user is authenticated (if user data is available)\nconst isAuthenticated=()=>!!user;// useEffect to check token validity on initial render\nuseEffect(()=>{// If there's user data but no token, automatically log the user out\nif(user&&!user.token){logout();}},[user]);// Depend on `user`, so it re-runs if user state changes\nreturn(/*#__PURE__*/// Provide authentication data and functions to all child components\n_jsx(AuthContext.Provider,{value:{user,login,logout,isAuthenticated},children:children}));};// Custom hook to access AuthContext easily in other components\nexport const useAuth=()=>{return useContext(AuthContext);};","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsx","_jsx","AuthContext","AuthProvider","_ref","children","user","setUser","savedUser","localStorage","getItem","JSON","parse","login","username","token","userData","setItem","stringify","logout","removeItem","isAuthenticated","Provider","value","useAuth"],"sources":["D:/bootcamp/SpringFrame/Project/Garden-Chat-FullStack/garden-chat-frontend/src/context/AuthProvider.js"],"sourcesContent":["// src/context/AuthProvider.js\r\nimport React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\n// Create the AuthContext, which will hold the authentication state and functions\r\nconst AuthContext = createContext();\r\n\r\n// AuthProvider component to manage authentication and provide context to children components\r\nexport const AuthProvider = ({ children }) => {\r\n    // State for the current user, initialized from localStorage if available\r\n    const [user, setUser] = useState(() => {\r\n        // Check if user data is saved in localStorage to persist login sessions\r\n        const savedUser = localStorage.getItem('user');\r\n        return savedUser ? JSON.parse(savedUser) : null;\r\n    });\r\n\r\n    // Function to log in the user\r\n    const login = (username, token) => {\r\n        // Create user data with username and token\r\n        const userData = { username, token };\r\n        setUser(userData);  // Update state with user data\r\n        // Save user data to localStorage for session persistence\r\n        localStorage.setItem('user', JSON.stringify(userData));\r\n    };\r\n\r\n    // Function to log out the user\r\n    const logout = () => {\r\n        setUser(null);  // Clear the user state\r\n        localStorage.removeItem('user');  // Remove user data from localStorage\r\n    };\r\n\r\n    // Check if the user is authenticated (if user data is available)\r\n    const isAuthenticated = () => !!user;\r\n\r\n    // useEffect to check token validity on initial render\r\n    useEffect(() => {\r\n        // If there's user data but no token, automatically log the user out\r\n        if (user && !user.token) {\r\n            logout();\r\n        }\r\n    }, [user]);  // Depend on `user`, so it re-runs if user state changes\r\n\r\n    return (\r\n        // Provide authentication data and functions to all child components\r\n        <AuthContext.Provider value={{ user, login, logout, isAuthenticated }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\n// Custom hook to access AuthContext easily in other components\r\nexport const useAuth = () => {\r\n    return useContext(AuthContext);\r\n};\r\n"],"mappings":"AAAA;AACA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,QAAQ,CAAEC,UAAU,CAAEC,SAAS,KAAQ,OAAO,CAE7E;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBACA,KAAM,CAAAC,WAAW,cAAGN,aAAa,CAAC,CAAC,CAEnC;AACA,MAAO,MAAM,CAAAO,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACrC;AACA,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGV,QAAQ,CAAC,IAAM,CACnC;AACA,KAAM,CAAAW,SAAS,CAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAC9C,MAAO,CAAAF,SAAS,CAAGG,IAAI,CAACC,KAAK,CAACJ,SAAS,CAAC,CAAG,IAAI,CACnD,CAAC,CAAC,CAEF;AACA,KAAM,CAAAK,KAAK,CAAGA,CAACC,QAAQ,CAAEC,KAAK,GAAK,CAC/B;AACA,KAAM,CAAAC,QAAQ,CAAG,CAAEF,QAAQ,CAAEC,KAAM,CAAC,CACpCR,OAAO,CAACS,QAAQ,CAAC,CAAG;AACpB;AACAP,YAAY,CAACQ,OAAO,CAAC,MAAM,CAAEN,IAAI,CAACO,SAAS,CAACF,QAAQ,CAAC,CAAC,CAC1D,CAAC,CAED;AACA,KAAM,CAAAG,MAAM,CAAGA,CAAA,GAAM,CACjBZ,OAAO,CAAC,IAAI,CAAC,CAAG;AAChBE,YAAY,CAACW,UAAU,CAAC,MAAM,CAAC,CAAG;AACtC,CAAC,CAED;AACA,KAAM,CAAAC,eAAe,CAAGA,CAAA,GAAM,CAAC,CAACf,IAAI,CAEpC;AACAP,SAAS,CAAC,IAAM,CACZ;AACA,GAAIO,IAAI,EAAI,CAACA,IAAI,CAACS,KAAK,CAAE,CACrBI,MAAM,CAAC,CAAC,CACZ,CACJ,CAAC,CAAE,CAACb,IAAI,CAAC,CAAC,CAAG;AAEb,oBACI;AACAL,IAAA,CAACC,WAAW,CAACoB,QAAQ,EAACC,KAAK,CAAE,CAAEjB,IAAI,CAAEO,KAAK,CAAEM,MAAM,CAAEE,eAAgB,CAAE,CAAAhB,QAAA,CACjEA,QAAQ,CACS,CAAC,EAE/B,CAAC,CAED;AACA,MAAO,MAAM,CAAAmB,OAAO,CAAGA,CAAA,GAAM,CACzB,MAAO,CAAA1B,UAAU,CAACI,WAAW,CAAC,CAClC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}