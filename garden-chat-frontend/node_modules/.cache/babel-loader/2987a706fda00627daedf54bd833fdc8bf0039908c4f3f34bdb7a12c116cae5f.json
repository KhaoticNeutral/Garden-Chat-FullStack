{"ast":null,"code":"// src/services/WebSocketService.js\nimport { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.isConnected = false;\n    this.typingCallback = null;\n    this.reconnectDelay = 5000; // Delay in ms for automatic reconnection\n  }\n  async connect(onMessageReceived, onUsersUpdated) {\n    if (this.isConnected) {\n      console.log(\"[STOMP Info] Already connected to WebSocket.\");\n      return;\n    }\n    console.log(\"[STOMP Debug] Initiating WebSocket connection...\");\n    const socketFactory = () => new SockJS('http://localhost:8088/ws');\n    this.stompClient = Stomp.over(socketFactory);\n\n    // Configure heartbeats\n    this.stompClient.heartbeatIncoming = 10000; // Expect a heartbeat from the server every 10 seconds\n    this.stompClient.heartbeatOutgoing = 10000; // Send a heartbeat to the server every 10 seconds\n\n    // Add debug logs for STOMP lifecycle\n    this.stompClient.debug = str => console.log(`[STOMP Debug] ${str}`);\n    this.stompClient.onStompError = frame => {\n      console.error(\"[STOMP Error] Broker error:\", frame.headers['message']);\n    };\n\n    // Attempt connection with a fallback timeout\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        console.warn(\"[STOMP Warning] Connection timeout, proceeding without STOMP.\");\n        resolve(); // Proceed even if STOMP fails\n      }, 5000); // 5-second fallback\n\n      this.stompClient.connect({}, frame => {\n        clearTimeout(timeout); // Clear fallback timeout\n        console.log(\"[STOMP Connected] Frame received:\", frame);\n        this.isConnected = true;\n\n        // Set up subscriptions if necessary\n        this._setupSubscriptions(onMessageReceived, onUsersUpdated);\n        resolve();\n      }, error => {\n        clearTimeout(timeout); // Clear timeout on error\n        console.error(\"[STOMP Error] Connection failed:\", error);\n        reject(error);\n      });\n    });\n  }\n  _setupSubscriptions(onMessageReceived, onUsersUpdated) {\n    if (this.stompClient && this.stompClient.connected) {\n      console.log(\"[STOMP Info] Setting up subscriptions...\");\n\n      // Subscribe to messages\n      this.stompClient.subscribe('/topic/messages', message => {\n        console.log(\"[STOMP Debug] Message received:\", message);\n        onMessageReceived(JSON.parse(message.body));\n      });\n\n      // Subscribe to online users\n      this.stompClient.subscribe('/topic/online-users', users => {\n        console.log(\"[STOMP Debug] Online users updated:\", users);\n        if (onUsersUpdated) {\n          onUsersUpdated(JSON.parse(users.body));\n        }\n      });\n\n      // Subscribe to typing notifications\n      this.stompClient.subscribe('/topic/typing', typingStatus => {\n        console.log(\"[STOMP Debug] Typing status received:\", typingStatus);\n        if (this.typingCallback) {\n          const {\n            username\n          } = JSON.parse(typingStatus.body);\n          this.typingCallback(username);\n        }\n      });\n      console.log(\"[STOMP Info] Subscriptions successfully set up.\");\n    } else {\n      console.error(\"[STOMP Warning] STOMP client not connected. Retrying subscriptions...\");\n      setTimeout(() => this._setupSubscriptions(onMessageReceived, onUsersUpdated), 1000); // Retry after 1 second\n    }\n  }\n\n  // Set the callback for typing notifications\n  onTyping(callback) {\n    this.typingCallback = callback; // Assign the provided callback to typingCallback\n    console.log(\"[STOMP Info] Typing callback set.\");\n  }\n\n  // Send typing status to the server for a specific group\n  sendTypingStatus(username, group) {\n    if (this.stompClient && this.stompClient.connected) {\n      this.stompClient.publish({\n        destination: '/app/typing',\n        body: JSON.stringify({\n          username,\n          group\n        })\n      });\n      console.log(\"[STOMP Info] Sent typing status for user:\", username);\n    } else {\n      console.error(\"[STOMP Warning] Cannot send typing status. STOMP client not connected.\");\n    }\n  }\n\n  // Send a chat message to the server\n  sendMessage(message) {\n    if (this.stompClient && this.stompClient.connected) {\n      this.stompClient.publish({\n        destination: '/app/chat',\n        body: JSON.stringify(message)\n      });\n      console.log(\"[STOMP Info] Message sent:\", message);\n    } else {\n      console.error(\"[STOMP Warning] Cannot send message. STOMP client not connected.\");\n    }\n  }\n\n  // Notify server of user's presence (to mark as online)\n  sendUserPresence(username) {\n    if (this.stompClient && this.stompClient.connected) {\n      this.stompClient.publish({\n        destination: '/app/online',\n        body: JSON.stringify({\n          username\n        })\n      });\n      console.log(\"[STOMP Info] User presence sent for:\", username);\n    } else {\n      console.error(\"[STOMP Warning] Cannot send user presence. STOMP client not connected.\");\n    }\n  }\n\n  // Disconnect the WebSocket client\n  disconnect() {\n    if (this.stompClient) {\n      console.log(\"[STOMP Debug] Disconnecting WebSocket...\");\n      this.stompClient.deactivate(); // Gracefully close the connection\n      this.isConnected = false; // Reset connection state\n    }\n  }\n}\nexport default new WebSocketService();","map":{"version":3,"names":["Stomp","SockJS","WebSocketService","constructor","stompClient","isConnected","typingCallback","reconnectDelay","connect","onMessageReceived","onUsersUpdated","console","log","socketFactory","over","heartbeatIncoming","heartbeatOutgoing","debug","str","onStompError","frame","error","headers","Promise","resolve","reject","timeout","setTimeout","warn","clearTimeout","_setupSubscriptions","connected","subscribe","message","JSON","parse","body","users","typingStatus","username","onTyping","callback","sendTypingStatus","group","publish","destination","stringify","sendMessage","sendUserPresence","disconnect","deactivate"],"sources":["D:/bootcamp/SpringFrame/Project/Garden-Chat-FullStack/garden-chat-frontend/src/services/WebSocketService.js"],"sourcesContent":["// src/services/WebSocketService.js\r\nimport { Stomp } from '@stomp/stompjs';\r\nimport SockJS from 'sockjs-client';\r\n\r\nclass WebSocketService {\r\n    constructor() {\r\n        this.stompClient = null;\r\n        this.isConnected = false;\r\n        this.typingCallback = null;\r\n        this.reconnectDelay = 5000; // Delay in ms for automatic reconnection\r\n    }\r\n\r\n    async connect(onMessageReceived, onUsersUpdated) {\r\n        if (this.isConnected) {\r\n            console.log(\"[STOMP Info] Already connected to WebSocket.\");\r\n            return;\r\n        }\r\n\r\n        console.log(\"[STOMP Debug] Initiating WebSocket connection...\");\r\n        const socketFactory = () => new SockJS('http://localhost:8088/ws');\r\n        this.stompClient = Stomp.over(socketFactory);\r\n\r\n        // Configure heartbeats\r\n        this.stompClient.heartbeatIncoming = 10000; // Expect a heartbeat from the server every 10 seconds\r\n        this.stompClient.heartbeatOutgoing = 10000; // Send a heartbeat to the server every 10 seconds\r\n\r\n        // Add debug logs for STOMP lifecycle\r\n        this.stompClient.debug = (str) => console.log(`[STOMP Debug] ${str}`);\r\n        this.stompClient.onStompError = (frame) => {\r\n            console.error(\"[STOMP Error] Broker error:\", frame.headers['message']);\r\n        };\r\n\r\n        // Attempt connection with a fallback timeout\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                console.warn(\"[STOMP Warning] Connection timeout, proceeding without STOMP.\");\r\n                resolve(); // Proceed even if STOMP fails\r\n            }, 5000); // 5-second fallback\r\n\r\n            this.stompClient.connect({}, (frame) => {\r\n                clearTimeout(timeout); // Clear fallback timeout\r\n                console.log(\"[STOMP Connected] Frame received:\", frame);\r\n                this.isConnected = true;\r\n\r\n                // Set up subscriptions if necessary\r\n                this._setupSubscriptions(onMessageReceived, onUsersUpdated);\r\n                resolve();\r\n            }, (error) => {\r\n                clearTimeout(timeout); // Clear timeout on error\r\n                console.error(\"[STOMP Error] Connection failed:\", error);\r\n                reject(error);\r\n            });\r\n        });\r\n    }\r\n\r\n    _setupSubscriptions(onMessageReceived, onUsersUpdated) {\r\n        if (this.stompClient && this.stompClient.connected) {\r\n            console.log(\"[STOMP Info] Setting up subscriptions...\");\r\n\r\n            // Subscribe to messages\r\n            this.stompClient.subscribe('/topic/messages', (message) => {\r\n                console.log(\"[STOMP Debug] Message received:\", message);\r\n                onMessageReceived(JSON.parse(message.body));\r\n            });\r\n\r\n            // Subscribe to online users\r\n            this.stompClient.subscribe('/topic/online-users', (users) => {\r\n                console.log(\"[STOMP Debug] Online users updated:\", users);\r\n                if (onUsersUpdated) {\r\n                    onUsersUpdated(JSON.parse(users.body));\r\n                }\r\n            });\r\n\r\n            // Subscribe to typing notifications\r\n            this.stompClient.subscribe('/topic/typing', (typingStatus) => {\r\n                console.log(\"[STOMP Debug] Typing status received:\", typingStatus);\r\n                if (this.typingCallback) {\r\n                    const { username } = JSON.parse(typingStatus.body);\r\n                    this.typingCallback(username);\r\n                }\r\n            });\r\n\r\n            console.log(\"[STOMP Info] Subscriptions successfully set up.\");\r\n        } else {\r\n            console.error(\"[STOMP Warning] STOMP client not connected. Retrying subscriptions...\");\r\n            setTimeout(() => this._setupSubscriptions(onMessageReceived, onUsersUpdated), 1000); // Retry after 1 second\r\n        }\r\n    }\r\n\r\n    // Set the callback for typing notifications\r\n    onTyping(callback) {\r\n        this.typingCallback = callback; // Assign the provided callback to typingCallback\r\n        console.log(\"[STOMP Info] Typing callback set.\");\r\n    }\r\n\r\n    // Send typing status to the server for a specific group\r\n    sendTypingStatus(username, group) {\r\n        if (this.stompClient && this.stompClient.connected) {\r\n            this.stompClient.publish({\r\n                destination: '/app/typing',\r\n                body: JSON.stringify({ username, group }),\r\n            });\r\n            console.log(\"[STOMP Info] Sent typing status for user:\", username);\r\n        } else {\r\n            console.error(\"[STOMP Warning] Cannot send typing status. STOMP client not connected.\");\r\n        }\r\n    }\r\n\r\n    // Send a chat message to the server\r\n    sendMessage(message) {\r\n        if (this.stompClient && this.stompClient.connected) {\r\n            this.stompClient.publish({\r\n                destination: '/app/chat',\r\n                body: JSON.stringify(message),\r\n            });\r\n            console.log(\"[STOMP Info] Message sent:\", message);\r\n        } else {\r\n            console.error(\"[STOMP Warning] Cannot send message. STOMP client not connected.\");\r\n        }\r\n    }\r\n\r\n    // Notify server of user's presence (to mark as online)\r\n    sendUserPresence(username) {\r\n        if (this.stompClient && this.stompClient.connected) {\r\n            this.stompClient.publish({\r\n                destination: '/app/online',\r\n                body: JSON.stringify({ username }),\r\n            });\r\n            console.log(\"[STOMP Info] User presence sent for:\", username);\r\n        } else {\r\n            console.error(\"[STOMP Warning] Cannot send user presence. STOMP client not connected.\");\r\n        }\r\n    }\r\n\r\n    // Disconnect the WebSocket client\r\n    disconnect() {\r\n        if (this.stompClient) {\r\n            console.log(\"[STOMP Debug] Disconnecting WebSocket...\");\r\n            this.stompClient.deactivate(); // Gracefully close the connection\r\n            this.isConnected = false; // Reset connection state\r\n        }\r\n    }\r\n}\r\n\r\nexport default new WebSocketService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}